generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_WITH_SCHEMA")
}

model User {
  id             String           @id @default(uuid()) @map("id")
  createdAt      DateTime?        @default(now()) @map("created_at")
  updatedAt      DateTime?        @updatedAt @map("updated_at")
  deletedAt      DateTime?        @map("deleted_at")
  isOnline       Boolean?         @default(false) @map("is_online")
  latestOnline   Boolean?         @map("latest_online")
  loginType      LoginType?       @map("login_type")
  provider       Provider?
  coinHistory    CoinHistory[]
  bookingHistory BookingHistory[]

  @@map("user")
}

model Provider {
  id             String          @id @default(uuid()) @map("id")
  createdAt      DateTime?       @default(now()) @map("created_at")
  updatedAt      DateTime?       @updatedAt @map("updated_at")
  deletedAt      DateTime?       @map("deleted_at")
  user           User            @relation(fields: [userId], references: [id])
  userId         String          @unique @map("user_id")
  slug           String?         @map("slug")
  name           String?         @map("name")
  avatarUrl      String?         @map("avatar_url")
  voiceUrl       String?         @map("voice_url")
  description    String?         @map("description") @db.Text()
  providerSkills ProviderSkill[]

  @@map("provider")
}

model Skill {
  id             String          @id @default(uuid()) @map("id")
  createdAt      DateTime?       @default(now()) @map("created_at")
  updatedAt      DateTime?       @updatedAt @map("updated_at")
  deletedAt      DateTime?       @map("deleted_at")
  name           String          @map("name")
  imageUrl       String?         @map("image_url")
  providerSkills ProviderSkill[]

  @@map("skill")
}

model ProviderSkill {
  id             String           @id @default(uuid()) @map("id")
  createdAt      DateTime?        @default(now()) @map("created_at")
  updatedAt      DateTime?        @updatedAt @map("updated_at")
  deletedAt      DateTime?        @map("deleted_at")
  provider       Provider         @relation(fields: [providerId], references: [id])
  providerId     String           @map("provider_id")
  skill          Skill            @relation(fields: [skillId], references: [id])
  skillId        String           @map("skill_id")
  defaultCost    Float            @map("default_cost")
  position       Int              @map("position")
  bookingCosts   BookingCost[]
  bookingHistory BookingHistory[]

  @@map("provider_skill")
}

model BookingCost {
  id              String        @id @default(uuid()) @map("id")
  createdAt       DateTime?     @default(now()) @map("created_at")
  updatedAt       DateTime?     @updatedAt @map("updated_at")
  deletedAt       DateTime?     @map("deleted_at")
  providerSkill   ProviderSkill @relation(fields: [providerSkillId], references: [id])
  providerSkillId String        @map("provider_skill_id")
  startTimeOfDay  String?       @map("start_time_of_day")
  endTimeOfDay    String?       @map("end_time_of_day")
  amount          Float?        @map("amount")

  @@map("booking_cost")
}

model CoinHistory {
  id        String    @id @default(uuid()) @map("id")
  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @map("user_id")
  coinType  CoinType? @map("coin_type")
  amount    Float?    @map("amount")
  createdId String?   @map("created_id")

  @@map("coin_history")
}

model BookingHistory {
  id              String         @id @default(uuid()) @map("id")
  createdAt       DateTime?      @default(now()) @map("created_at")
  updatedAt       DateTime?      @updatedAt @map("updated_at")
  deletedAt       DateTime?      @map("deleted_at")
  status          BookingStatus
  acceptedAt      DateTime?      @map("accepted_at")
  booker          User?          @relation(fields: [bookerId], references: [id])
  bookerId        String?        @map("booker_id")
  providerSkill   ProviderSkill? @relation(fields: [providerSkillId], references: [id])
  providerSkillId String?        @map("provider_skill_id")
  totalCost       Float          @map("total_cost")
  bookingPeriod   Int            @map("booking_period")

  feedbacks Feedback[]

  @@map("booking_history")
}

model Feedback {
  id          String         @id @default(uuid()) @map("id")
  createdAt   DateTime?      @default(now()) @map("created_at")
  updatedAt   DateTime?      @updatedAt @map("updated_at")
  deletedAt   DateTime?      @map("deleted_at")
  booking     BookingHistory @relation(fields: [bookingId], references: [id])
  bookingId   String         @map("booking_id")
  content     String?        @map("content")
  amountStart Int?           @map("amount_start")

  @@map("feedback")
}

enum CoinType {
  SPEND_BOOKING
  SPEND_GIFT
  SPEND_DONATE
  GET_BOOKING
  GET_DONATE
  GET_GIFT
  BUY_COIN
  GET_MISSION
  WITHDRAW
  ADMIN
}

enum LoginType {
  INAPP
  FACEBOOK
  GOOGLE
  KAKAO
  APPLE
  PHONE
}

enum BookingStatus {
  INIT
  USER_CANCEL
  PROVIDER_CANCEL
  PROVIDER_ACCEPT
  PROVIDER_FINISH_SOON
  USER_FINISH_SOON
}
