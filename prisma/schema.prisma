generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_WITH_SCHEMA")
}

model User {
  id                     String                    @id @default(uuid()) @map("id")
  createdAt              DateTime?                 @default(now()) @map("created_at")
  updatedAt              DateTime?                 @updatedAt @map("updated_at")
  deletedAt              DateTime?                 @map("deleted_at")
  slug                   String?                   @map("slug")
  name                   String?                   @map("name") @db.VarChar(80)
  username               String?                   @map("username") @db.VarChar(80)
  dob                    DateTime?                 @map("dob")
  gender                 Gender                    @default(OTHER) @map("gender")
  phone                  String?                   @map("phone")
  email                  String?                   @map("email")
  password               String?                   @map("password")
  loginType              LoginType                 @default(INAPP) @map("login_type")
  avatarUrl              String?                   @map("avatar_url")
  ipv4                   String?                   @map("ipv4") @db.Char(40)
  isOnline               Boolean?                  @default(false) @map("is_online")
  latestOnline           DateTime?                 @map("latest_online")
  isBanned               Boolean                   @default(false) @map("is_banned")
  isVerified             Boolean                   @default(false) @map("is_verified")
  isProvider             Boolean                   @default(false) @map("is_provider")
  providerConfig         ProviderConfig?
  balanceHistories       BalanceHistory[]
  bookingHistories       BookingHistory[]
  depositRequests        DepositRequest[]
  withdrawRequests       WithdrawRequest[]
  notices                Notice[]
  posts                  Post[]
  likePosts              LikePost[]
  commentPosts           CommentPost[]
  watchedPosts           WatchedPost[]
  donorDonations         Donation[]                @relation("DonorDonations")
  recipientDonations     Donation[]                @relation("RecipientDonations")
  voucherRedeemedBooking VoucherRedeemedBooking[]
  paymentSystems         UserPaymentSystem[]
  refreshToken           RefreshTokenUser?
  sensitiveInformation   UserSensitiveInformation?
  verificationRequest    UserKYCRequest?
  address                UserAddress?
  providerServices       ProviderService[]
  vouchers               Voucher[]
  reportingUsers         ReportUser[]              @relation("ReportingUsers")
  reportedUsers          ReportUser[]              @relation("ReportedUsers")

  @@map("user")
}

model ProviderConfig {
  id          String          @id @default(uuid()) @map("id")
  createdAt   DateTime?       @default(now()) @map("created_at")
  updatedAt   DateTime?       @updatedAt @map("updated_at")
  deletedAt   DateTime?       @map("deleted_at")
  user        User            @relation(fields: [userId], references: [id])
  userId      String          @unique @map("user_id")
  voiceUrl    String?         @map("voice_url")
  description String?         @map("description") @db.Text()
  status      ProviderStatus? @default(UN_ACTIVATED) @map("status")
  isBanned    Boolean         @default(false) @map("is_banned")

  @@map("provider_config")
}

model UserAddress {
  id         String    @id @default(uuid()) @map("id")
  createdAt  DateTime? @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")
  deletedAt  DateTime? @map("deleted_at")
  userId     String    @unique @map("user_id")
  user       User      @relation(fields: [userId], references: [id])
  provinceId String    @map("provine_id")
  districtId String    @map("district_id")
  communeId  String    @map("commune_id")
  province   Province  @relation(fields: [provinceId], references: [id])
  district   District  @relation(fields: [districtId], references: [id])
  commune    Commune   @relation(fields: [communeId], references: [id])

  @@map("user_address")
}

model Province {
  id          String        @id @unique @map("id")
  createdAt   DateTime?     @default(now()) @map("created_at")
  updatedAt   DateTime?     @updatedAt @map("updated_at")
  deletedAt   DateTime?     @map("deleted_at")
  name        String        @map("name")
  enName      String        @map("en_name")
  districts   District[]
  userAddress UserAddress[]

  @@map("province")
}

model District {
  id          String        @id @unique @map("id")
  createdAt   DateTime?     @default(now()) @map("created_at")
  updatedAt   DateTime?     @updatedAt @map("updated_at")
  deletedAt   DateTime?     @map("deleted_at")
  name        String        @map("name")
  enName      String        @map("en_name")
  provinceId  String        @map("province_id")
  province    Province      @relation(fields: [provinceId], references: [id])
  communes    Commune[]
  userAddress UserAddress[]

  @@map("district")
}

model Commune {
  id          String        @id @unique @map("id")
  createdAt   DateTime?     @default(now()) @map("created_at")
  updatedAt   DateTime?     @updatedAt @map("updated_at")
  deletedAt   DateTime?     @map("deleted_at")
  name        String        @map("name")
  enName      String        @map("en_name")
  districtId  String        @map("district_id")
  district    District      @relation(fields: [districtId], references: [id])
  userAddress UserAddress[]

  @@map("commune")
}

model UserSensitiveInformation {
  id                         String    @id @default(uuid()) @map("id")
  createdAt                  DateTime  @default(now()) @map("created_at")
  updatedAt                  DateTime? @updatedAt @map("updated_at")
  deletedAt                  DateTime? @map("deleted_at")
  userId                     String    @unique @map("user_id")
  user                       User      @relation(fields: [userId], references: [id])
  frontSideCitizenIdImageUrl String    @map("front_side_citizen_id_image_url")
  backSideCitizenIdImageUrl  String    @map("back_side_citizen_id_image_url")
  portraitImageUrl           String    @map("portrait_image_url")
  citizenId                  String    @map("citizen_id")
  citizenIdIssuanceDate      DateTime? @map("citizen_id_issuance_date")
  fullname                   String?   @map("fullname")
  ethnicity                  String?   @map("ethnicity")
  dob                        DateTime? @map("dob")
  permanentResidency         String?   @map("permanent_residency")
  religion                   String?   @map("religion")
  homeTown                   String?   @map("home_town")
  adminId                    String?

  @@map("user_sensitive_information")
}

model UserKYCRequest {
  id                         String        @id @default(uuid()) @map("id")
  createdAt                  DateTime      @default(now()) @map("created_at")
  updatedAt                  DateTime?     @updatedAt @map("updated_at")
  deletedAt                  DateTime?     @map("deleted_at")
  userId                     String        @unique @map("user_id")
  user                       User          @relation(fields: [userId], references: [id])
  frontSideCitizenIdImageUrl String        @map("front_side_citizen_id_image_url")
  backSideCitizenIdImageUrl  String        @map("back_side_citizen_id_image_url")
  portraitImageUrl           String        @map("portrait_image_url")
  adminId                    String?       @map("admin_id")
  admin                      Admin?        @relation(fields: [adminId], references: [id])
  lastestHandleTime          DateTime?     @map("last_handle_time")
  userKYCStatus              UserKYCStatus @default(PENDING) @map("verification_status")

  @@map("user_kyc_request")
}

model RefreshTokenUser {
  id           String    @id @default(uuid()) @map("id")
  createdAt    DateTime? @default(now()) @map("created_at")
  updatedAt    DateTime? @updatedAt @map("updated_at")
  deletedAt    DateTime? @map("deleted_at")
  refreshToken String?   @map("refresh_token")
  user         User      @relation(fields: [userId], references: [id])
  userId       String    @unique @map("user_id")

  @@map("refresh_token_user")
}

model Admin {
  id                               String               @id @default(uuid()) @map("id")
  createdAt                        DateTime?            @default(now()) @map("created_at")
  updatedAt                        DateTime?            @updatedAt @map("updated_at")
  deletedAt                        DateTime?            @map("deleted_at")
  name                             String?              @map("name") @db.VarChar(80)
  username                         String?              @map("username") @db.VarChar(20)
  dob                              DateTime?            @map("dob")
  gender                           Gender               @default(OTHER) @map("gender")
  phone                            String?              @map("phone")
  email                            String?              @map("email")
  password                         String?              @map("password")
  avatarUrl                        String?              @map("avatar_url")
  ipv4                             String?              @map("ipv4") @db.Char(20)
  refreshTokenAdmin                RefreshTokenAdmin?
  adminRoles                       AdminRole[]
  adminPaymentSystems              AdminPaymentSystem[]
  userVerificationRequests         UserKYCRequest[]
  historyAllocationBalanceForUsers BalanceHistory[]
  voucher                          Voucher[]
  depositRequest                   DepositRequest[]

  @@map("admin")
}

model RefreshTokenAdmin {
  id           String    @id @default(uuid()) @map("id")
  createdAt    DateTime? @default(now()) @map("created_at")
  updatedAt    DateTime? @updatedAt @map("updated_at")
  deletedAt    DateTime? @map("deleted_at")
  refreshToken String?   @map("refresh_token")
  admin        Admin     @relation(fields: [adminId], references: [id])
  adminId      String    @unique @map("admin_id")

  @@map("refresh_token_admin")
}

model AdminRole {
  id        String        @id @default(uuid()) @map("id")
  createdAt DateTime?     @default(now()) @map("created_at")
  updatedAt DateTime?     @updatedAt @map("updated_at")
  deletedAt DateTime?     @map("deleted_at")
  admin     Admin         @relation(fields: [adminId], references: [id])
  adminId   String        @map("admin_id")
  roleType  AdminRoleType @map("role_type")

  @@map("admin_role")
}

model AdminPaymentSystem {
  id               String                   @id @default(uuid()) @map("id")
  createdAt        DateTime?                @default(now()) @map("created_at")
  updatedAt        DateTime?                @updatedAt @map("updated_at")
  deletedAt        DateTime?                @map("deleted_at")
  admin            Admin                    @relation(fields: [adminId], references: [id])
  adminId          String                   @map("admin_id")
  platform         PaymentSystemPlatform    @map("platform")
  platformAccount  String?                  @map("platform_account")
  beneficiary      String?                  @map("beneficiary")
  isCashierAccount Boolean?                 @default(false) @map("is_cashier_account")
  isReady          Boolean?                 @default(false) @map("is_ready")
  isDefault        Boolean?                 @default(false) @map("is_default")
  status           AdminPaymentSystemStatus @default(INIT) @map("status")

  @@map("admin_payment_system")
}

model UserPaymentSystem {
  id               String                @id @default(uuid()) @map("id")
  createdAt        DateTime?             @default(now()) @map("created_at")
  updatedAt        DateTime?             @updatedAt @map("updated_at")
  deletedAt        DateTime?             @map("deleted_at")
  user             User                  @relation(fields: [userId], references: [id])
  userId           String                @map("user_id")
  platform         PaymentSystemPlatform @map("platform")
  platformAccount  String?               @map("platform_account")
  beneficiary      String?               @map("beneficiary")
  withdrawRequests WithdrawRequest[]

  @@map("user_payment_system")
}

model PaymentQrSetting {
  id        String                 @id @default(uuid()) @map("id")
  createdAt DateTime?              @default(now()) @map("created_at")
  updatedAt DateTime?              @updatedAt @map("updated_at")
  deletedAt DateTime?              @map("deleted_at")
  regex     String?                @map("regex")
  platform  PaymentSystemPlatform? @map("system_platform")

  @@map("payemt_qr_setting")
}

model Service {
  id          String    @id @default(uuid()) @map("id")
  createdAt   DateTime? @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")
  name        String    @map("name")
  viName      String?   @map("vi_name")
  imageUrl    String?   @map("image_url")
  slug        String?   @map("slug")
  isActivated Boolean   @default(true) @map("is_activated")

  providerServices  ProviderService[]
  serviceAttributes ServiceAttribute[]

  @@map("service")
}

model ServiceAttribute {
  id                       String                     @id @default(uuid()) @map("id")
  createdAt                DateTime?                  @default(now()) @map("created_at")
  updatedAt                DateTime?                  @updatedAt @map("updated_at")
  deletedAt                DateTime?                  @map("deleted_at")
  service                  Service                    @relation(fields: [serviceId], references: [id])
  serviceId                String                     @map("service_id")
  attribute                String                     @map("attribute")
  viAttribute              String?                    @map("vi_attribute")
  isActivated              Boolean                    @default(true) @map("is_activated")
  serviceAttributeValues   ServiceAttributeValue[]
  ProviderServiceAttribute ProviderServiceAttribute[]

  @@map("service_attribute")
}

model ServiceAttributeValue {
  id                             String                          @id @default(uuid()) @map("id")
  createdAt                      DateTime?                       @default(now()) @map("created_at")
  updatedAt                      DateTime?                       @updatedAt @map("updated_at")
  deletedAt                      DateTime?                       @map("deleted_at")
  serviceAttribute               ServiceAttribute                @relation(fields: [serviceAttributeId], references: [id])
  serviceAttributeId             String                          @map("service_attribute_id")
  value                          String                          @map("value")
  viValue                        String?                         @map("vi_value")
  isActivated                    Boolean                         @default(true) @map("is_activated")
  providerServiceAttributeValues ProviderServiceAttributeValue[]

  @@map("service_attribute_value")
}

model ProviderService {
  id                        String                     @id @default(uuid()) @map("id")
  createdAt                 DateTime?                  @default(now()) @map("created_at")
  updatedAt                 DateTime?                  @updatedAt @map("updated_at")
  deletedAt                 DateTime?                  @map("deleted_at")
  provider                  User                       @relation(fields: [providerId], references: [id])
  providerId                String                     @map("provider_id")
  service                   Service                    @relation(fields: [serviceId], references: [id])
  serviceId                 String                     @map("service_id")
  defaultCost               Float                      @map("default_cost")
  description               String?                    @map("description") @db.Text()
  position                  Int                        @map("position")
  bookingCosts              BookingCost[]
  bookingHistories          BookingHistory[]
  providerServiceAttributes ProviderServiceAttribute[]

  @@map("provider_service")
}

model ProviderServiceAttribute {
  id                             String                          @id @default(uuid()) @map("id")
  createdAt                      DateTime?                       @default(now()) @map("created_at")
  updatedAt                      DateTime?                       @updatedAt @map("updated_at")
  deletedAt                      DateTime?                       @map("deleted_at")
  providerService                ProviderService                 @relation(fields: [providerServiceId], references: [id])
  providerServiceId              String                          @map("provider_service_id")
  serviceAttribute               ServiceAttribute                @relation(fields: [serviceAttributeId], references: [id])
  serviceAttributeId             String                          @map("service_attribute_id")
  providerServiceAttributeValues ProviderServiceAttributeValue[]

  @@map("provider_service_attribute")
}

model ProviderServiceAttributeValue {
  id                         String                   @id @default(uuid()) @map("id")
  createdAt                  DateTime?                @default(now()) @map("created_at")
  updatedAt                  DateTime?                @updatedAt @map("updated_at")
  deletedAt                  DateTime?                @map("deleted_at")
  providerServiceAttribute   ProviderServiceAttribute @relation(fields: [providerServiceAttributeId], references: [id])
  providerServiceAttributeId String                   @map("provider_service_attribute_id")
  serviceAttributeValue      ServiceAttributeValue    @relation(fields: [serviceAttributeValueId], references: [id])
  serviceAttributeValueId    String                   @map("service_attribute_value_id")

  @@map("provider_service_attribute_value")
}

model BookingCost {
  id                String          @id @default(uuid()) @map("id")
  createdAt         DateTime?       @default(now()) @map("created_at")
  updatedAt         DateTime?       @updatedAt @map("updated_at")
  deletedAt         DateTime?       @map("deleted_at")
  providerService   ProviderService @relation(fields: [providerServiceId], references: [id])
  providerServiceId String          @map("provider_service_id")
  startTimeOfDay    String?         @map("start_time_of_day")
  endTimeOfDay      String?         @map("end_time_of_day")
  amount            Float?          @map("amount")

  @@map("booking_cost")
}

model BalanceHistory {
  id              String           @id @default(uuid()) @map("id")
  createdAt       DateTime?        @default(now()) @map("created_at")
  updatedAt       DateTime?        @updatedAt @map("updated_at")
  deletedAt       DateTime?        @map("deleted_at")
  user            User             @relation(fields: [userId], references: [id])
  userId          String           @map("user_id")
  balanceType     BalanceType?     @map("balance_type")
  amount          Float?           @map("amount")
  adminCreated    Admin?           @relation(fields: [adminIdCreated], references: [id])
  adminIdCreated  String?          @map("admin_id_created")
  bookingId       String?          @map("booking_id")
  booking         BookingHistory?  @relation(fields: [bookingId], references: [id])
  donationId      String?          @map("donation_id")
  donation        Donation?        @relation(fields: [donationId], references: [id])
  depositRequest  DepositRequest?
  withdrawRequest WithdrawRequest?

  @@map("balance_history")
}

model BookingHistory {
  id                      String                   @id @default(uuid()) @map("id")
  createdAt               DateTime?                @default(now()) @map("created_at")
  updatedAt               DateTime?                @updatedAt @map("updated_at")
  deletedAt               DateTime?                @map("deleted_at")
  status                  BookingStatus            @map("status")
  acceptedAt              DateTime?                @map("accepted_at")
  booker                  User?                    @relation(fields: [bookerId], references: [id])
  bookerId                String?                  @map("booker_id")
  providerService         ProviderService?         @relation(fields: [providerServiceId], references: [id])
  providerServiceId       String?                  @map("provider_service_id")
  totalCost               Float                    @map("total_cost")
  bookingPeriod           Int                      @map("booking_period")
  appliedVoucherIds       String[]                 @default([]) @map("applied_voucher_ids")
  providerReceivedBalance Float?                   @map("provider_received_balance")
  feedback                Feedback?
  voucherRedeemedBookings VoucherRedeemedBooking[]
  balanceHistories        BalanceHistory[]

  @@map("booking_history")
}

model VoucherRedeemedBooking {
  id                 String         @id @default(uuid()) @map("id")
  createdAt          DateTime?      @default(now()) @map("created_at")
  updatedAt          DateTime?      @updatedAt @map("updated_at")
  deletedAt          DateTime?      @map("deleted_at")
  voucher            Voucher        @relation(fields: [voucherId], references: [id])
  voucherId          String         @map("voucher_id")
  booker             User           @relation(fields: [bookerId], references: [id])
  bookerId           String         @map("booker_id")
  booking            BookingHistory @relation(fields: [bookingHistoryId], references: [id])
  bookingHistoryId   String         @map("booking_history_id")
  totalDiscountValue Int            @default(0) @map("total_discount_value")
  totalCashbackValue Int            @default(0) @map("total_cashback_value")
  @@map("voucher_redeemed_booking")
}

model Voucher {
  id                               String               @id @default(uuid()) @map("id")
  createdAt                        DateTime?            @default(now()) @map("created_at")
  updatedAt                        DateTime?            @updatedAt @map("updated_at")
  deletedAt                        DateTime?            @map("deleted_at")
  provider                         User?                @relation(fields: [providerId], references: [id])
  providerId                       String?              @map("provider_id")
  admin                            Admin?               @relation(fields: [adminId], references: [id])
  adminId                          String?              @map("admin_id")
  code                             String?              @unique @map("code")
  image                            String?              @map("image")
  name                             String?              @map("name")
  description                      String?              @map("description")
  numberIssued                     Int?                 @map("number_issued")
  dailyNumberIssued                Int?                 @map("daily_number_issued")
  numberUsablePerBooker            Int?                 @map("number_usable_per_booker")
  dailyUsageLimitPerBooker         Int?                 @map("daily_usage_limit_per_booker")
  isActivated                      Boolean              @default(false) @map("is_activated")
  isPublished                      Boolean              @default(false) @map("is_published")
  type                             VoucherType          @default(DISCOUNT) @map("type")
  discountUnit                     DiscountUnit         @default(PERCENT) @map("discount_unit")
  discountValue                    Int                  @default(0) @map("discount_value")
  maximumDiscountValue             Int?                 @map("maximum_discount_value")
  minimumBookingTotalPriceForUsage Int?                 @default(0) @map("minimum_booking_total_price_for_usage")
  minimumBookingDurationForUsage   Int?                 @default(0) @map("minimum_booking_duration_for_sage")
  startDate                        DateTime?            @map("start_date")
  endDate                          DateTime?            @map("end_date")
  applyISODayOfWeek                Int[]                @default([1, 2, 3, 4, 5, 6, 7]) @map("apply_iso_day_of_week") //Monday is 1, Tuesday is 2, through to 7 for Sunday.
  recipientType                    VoucherRecipientType @default(ALL) @map("recipient_type")
  selectiveBookerIds               String[]             @default([]) @map("selective_booker_id")
  isHided                          Boolean              @default(false) @map("is_hided")
  status                           VoucherStatus        @default(PENDING) @map("status")

  voucherRedeemedBookings VoucherRedeemedBooking[]

  @@map("voucher")
}

model Feedback {
  id         String         @id @default(uuid()) @map("id")
  createdAt  DateTime?      @default(now()) @map("created_at")
  updatedAt  DateTime?      @updatedAt @map("updated_at")
  deletedAt  DateTime?      @map("deleted_at")
  booking    BookingHistory @relation(fields: [bookingId], references: [id])
  bookingId  String         @unique @map("booking_id")
  content    String?        @map("content")
  amountStar Int?           @map("amount_star")

  @@map("feedback")
}

model ReportUser {
  id              String           @id @default(uuid()) @map("id")
  createdAt       DateTime?        @default(now()) @map("created_at")
  updatedAt       DateTime?        @updatedAt @map("updated_at")
  deletedAt       DateTime?        @map("deleted_at")
  reportingUser   User             @relation("ReportingUsers", fields: [reportingUserId], references: [id])
  reportingUserId String           @map("reporting_user_id")
  reportedUser    User             @relation("ReportedUsers", fields: [reportedUserId], references: [id])
  reportedUserId  String           @map("reported_user_id")
  reasonType      ReportReasonType @default(OTHER) @map("resone_type")
  content         String?          @map("content")

  @@map("report_user")
}

model DepositRequest {
  id               String                       @id @default(uuid()) @map("id")
  createdAt        DateTime?                    @default(now()) @map("created_at")
  updatedAt        DateTime?                    @updatedAt @map("updated_at")
  deletedAt        DateTime?                    @map("deleted_at")
  amountMoney      Int?                         @map("amount_money")
  amountBalance    Float?                       @map("amount_balance")
  unitCurrency     UnitCurrency?                @map("unit_currency")
  requester        User                         @relation(fields: [requesterId], references: [id])
  requesterId      String                       @map("requester_id")
  dataString       String?                      @map("data_string")
  dataStringType   DepositRequestDataStringType @map("data_string_type")
  balanceHistory   BalanceHistory?              @relation(fields: [balanceHistoryId], references: [id])
  balanceHistoryId String?                      @unique @map("balance_history_id")
  status           DepositRequestStatus         @default(INIT) @map("status")
  handlerId        String?                      @map("handler_id")
  handler          Admin?                       @relation(fields: [handlerId], references: [id])
  handlerFeedback  String?                      @map("handler_feedback")
  billImageUrl     String?                      @map("bill_image_url")
  platform         PaymentSystemPlatform?       @map("platform")
  transactionCode  String?                      @unique() @map("transaction_code")
  content          String?                      @map("content")
  beneficiary      String?                      @map("beneficiary")

  @@map("deposit_request")
}

model WithdrawRequest {
  id                  String                 @id @default(uuid()) @map("id")
  createdAt           DateTime?              @default(now()) @map("created_at")
  updatedAt           DateTime?              @updatedAt @map("updated_at")
  deletedAt           DateTime?              @map("deleted_at")
  amountMoney         Int?                   @map("amount_money")
  amountBalance       Float?                 @map("amount_balance")
  unitCurrency        UnitCurrency?          @map("unit_currency")
  requester           User                   @relation(fields: [requesterId], references: [id])
  requesterId         String                 @map("requester_id")
  balanceHistory      BalanceHistory?        @relation(fields: [balanceHistoryId], references: [id])
  balanceHistoryId    String?                @unique @map("balance_history_id")
  status              WithdrawRequestStatus? @default(PENDING) @map("status")
  handlerId           String?                @map("handler_id")
  handlerFeedback     String?                @map("handler_feedback")
  billImageUrl        String?                @map("bill_image_url")
  userPaymentSystem   UserPaymentSystem      @relation(fields: [userPaymentSystemId], references: [id])
  userPaymentSystemId String                 @map("user_payment_system_id")

  @@map("withdrawal_request")
}

model Notice {
  id        String      @id @default(uuid()) @map("id")
  createdAt DateTime?   @default(now()) @map("created_at")
  updatedAt DateTime?   @updatedAt @map("updated_at")
  deletedAt DateTime?   @map("deleted_at")
  type      NoticeType? @map("notice_type")
  user      User        @relation(fields: [userId], references: [id])
  userId    String      @map("user_id")
  data      Json?       @map("data")
  isReaded  Boolean?    @default(false) @map("is_readed")

  @@map("notice")
}

model Banner {
  id          String    @id @default(uuid()) @map("id")
  createdAt   DateTime? @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")
  imageUrl    String?   @map("image_url")
  position    Int?      @map("position")
  isActivated Boolean?  @default(false) @map("is_actiaved")

  @@map("banner")
}

model BalanceSetting {
  id                    String                 @id @default(uuid()) @map("id")
  createdAt             DateTime?              @default(now()) @map("created_at")
  updatedAt             DateTime?              @updatedAt @map("updated_at")
  deletedAt             DateTime?              @map("deleted_at")
  balanceSettingType    BalanceSettingType?    @map("balance_setting_type")
  paymentSystemPlatform PaymentSystemPlatform? @map("payment_system_platform")
  unitCurrency          UnitCurrency?          @map("unit_currency")
  feePercentage         Float?                 @default(0) @map("fee")
  surcharge             Float?                 @default(0) @map("surcharge")

  @@map("balance_setting")
}

model Post {
  id           String        @id @default(uuid()) @map("id")
  createdAt    DateTime?     @default(now()) @map("created_at")
  updatedAt    DateTime?     @updatedAt @map("updated_at")
  deletedAt    DateTime?     @map("deleted_at")
  user         User          @relation(fields: [userId], references: [id])
  userId       String        @map("user_id")
  content      String?       @map("content") @db.Text()
  thumbnails   Json[]        @default([]) @map("thumbnails")
  likePosts    LikePost[]
  commentPosts CommentPost[]
  watchedPosts WatchedPost[]

  @@map("post")
}

model LikePost {
  id        String    @id @default(uuid()) @map("id")
  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @map("user_id")
  post      Post      @relation(fields: [postId], references: [id])
  postId    String    @map("post_id")

  @@map("like_post")
}

model CommentPost {
  id              String        @id @default(uuid()) @map("id")
  createdAt       DateTime?     @default(now()) @map("created_at")
  updatedAt       DateTime?     @updatedAt @map("updated_at")
  deletedAt       DateTime?     @map("deleted_at")
  user            User          @relation(fields: [userId], references: [id])
  userId          String        @map("user_id")
  post            Post          @relation(fields: [postId], references: [id])
  postId          String        @map("post_id")
  content         String?       @map("content")
  parentComment   CommentPost?  @relation("parent_comment", fields: [parentCommentId], references: [id])
  parentCommentId String?       @map("parent_comment_id")
  replies         CommentPost[] @relation("parent_comment")

  @@map("comment_post")
}

model WatchedPost {
  id        String    @id @default(uuid()) @map("id")
  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @map("user_id")
  post      Post      @relation(fields: [postId], references: [id])
  postId    String    @map("post_id")

  @@map("watched_post")
}

model Donation {
  id               String           @id @default(uuid()) @map("id")
  createdAt        DateTime?        @default(now()) @map("created_at")
  updatedAt        DateTime?        @updatedAt @map("updated_at")
  deletedAt        DateTime?        @map("deleted_at")
  donor            User             @relation("DonorDonations", fields: [donorId], references: [id])
  donorId          String           @map("donor_id")
  donatedAmount    Float            @map("donated_amount")
  recipient        User             @relation("RecipientDonations", fields: [recipientId], references: [id])
  recipientId      String           @map("recipient_id")
  receivedAmount   Float            @map("received_amount")
  message          String?          @map("message")
  balanceHistories BalanceHistory[]

  @@map("donation")
}

enum BalanceType {
  SPEND_BOOKING
  SPEND_GIFT
  SPEND_DONATE
  GET_BOOKING
  GET_DONATE
  GET_GIFT
  DEPOSIT
  GET_MISSION
  WITHDRAW
  ADMIN
}

enum LoginType {
  INAPP
  FACEBOOK
  GOOGLE
  KAKAO
  APPLE
  PHONE
}

enum AdminRoleType {
  SUPER_ADMIN
  ADMIN
  COLLABORATOR
  CASHIER
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PRIVATE
}

enum PaymentSystemPlatform {
  MOMO
  VNPAY
  ZALOPAY
  TPB
  BIDV
}

enum AdminPaymentSystemStatus {
  INIT
  APPROVED
  REJECTED
}

enum BookingStatus {
  INIT
  USER_CANCEL
  PROVIDER_CANCEL
  PROVIDER_ACCEPT
  PROVIDER_FINISH_SOON
  USER_FINISH_SOON
}

enum UnitCurrency {
  VND
  USD
}

enum DepositRequestStatus {
  INIT
  USER_NOTICES_PAID
  PENDING
  REJECTED
  APPROVED
}

enum WithdrawRequestStatus {
  PENDING
  CANCEL
  REJECTED
  COMPLETED
}

enum BalanceSettingType {
  DEPOSIT
  WITHDRAW
  PROVIDER_GET_MONEY_BOOKING
  GIFT_TO_MONEY
  PROVIDER_GET_MONEY_DONATE
}

enum NoticeType {
  NEW_MESSAGE
  HAVE_BOOKING
  BOOKING_HAS_BEEN_DECLINED
  BOOKING_HAS_BEEN_SUCCEEDED
  SOMEONE_FOLLOWING_YOU
  ADMIN_HAS_BANNED_PROVIDER
  ADMIN_HAS_UN_BANNED_PROVIDER
  ADMIN_HAS_APPROVED_KYC_REQUEST
  ADMIN_HAS_REJECTED_KYC_REQUEST
  ADMIN_HAS_COMPLETED_WITHDRAW_REQUEST
  ADMIN_HAS_REJECTED_WITHDRAW_REQUEST
}

enum VoucherType {
  DISCOUNT
  CASHBACK
}

enum DiscountUnit {
  CASH
  PERCENT
}

enum VoucherRecipientType {
  ALL
  FIRST_TIME_BOOKING
  PREVIOUS_BOOKING
  SELECTIVE_BOOKER
  TOP_5_BOOKER
  TOP_10_BOOKER
}

enum RegisterProviderRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ProviderStatus {
  ACTIVATED
  UN_ACTIVATED
  STOPPED_ACCEPTING_BOOKING
  BUSY
}

enum UserKYCStatus {
  PENDING
  APPROVED
  REJECTED
}

enum VoucherStatus {
  PENDING
  APPROVED
  REJECTED
}

enum DepositRequestDataStringType {
  QR
  REDIRECT_URL
}

enum ReportReasonType {
  ABUSIVE_LANGUAGE
  CHEATING
  SPAM_OR_HARASSMENT
  INAPPROPRIATE_CONTENT
  VIOLENT_OR_DISCRIMINATORY_BEHAVIOR
  FAKE_ACCOUNT_OR_SCAM
  ILLEGAL_TRANSACTIONS
  OTHER
}

// ABUSIVE_LANGUAGE = "Lạm dụng ngôn ngữ và hành vi gây khó chịu"
//     CHEATING = "Gian lận"
//     SPAM_OR_HARASSMENT = "Spam hoặc quấy rối"
//     INAPPROPRIATE_CONTENT = "Hình ảnh không phù hợp hoặc vi phạm đạo đức"
//     VIOLENT_OR_DISCRIMINATORY_BEHAVIOR = "Hành vi bạo lực hoặc kỳ thị"
//     FAKE_ACCOUNT_OR_SCAM = "Tài khoản giả mạo hoặc lừa đảo"
//     ILLEGAL_TRANSACTIONS = "Tham gia vào giao dịch bất hợp pháp hoặc trao đổi thông tin cá nhân không an toàn"
