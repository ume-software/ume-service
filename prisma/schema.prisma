generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_WITH_SCHEMA")
}

model User {
  id                     String                    @id @default(uuid()) @map("id")
  createdAt              DateTime?                 @default(now()) @map("created_at")
  updatedAt              DateTime?                 @updatedAt @map("updated_at")
  deletedAt              DateTime?                 @map("deleted_at")
  slug                   String?                   @map("slug")
  name                   String?                   @map("name") @db.VarChar(80)
  username               String?                   @map("username") @db.VarChar(80)
  dob                    DateTime?                 @map("dob")
  gender                 Gender                    @default(ORTHER) @map("gender")
  phone                  String?                   @map("phone")
  email                  String?                   @map("email")
  password               String?                   @map("password")
  loginType              LoginType                 @default(INAPP) @map("login_type")
  avatarUrl              String?                   @map("avatar_url")
  ipv4                   String?                   @map("ipv4") @db.Char(40)
  isOnline               Boolean?                  @default(false) @map("is_online")
  latestOnline           DateTime?                 @map("latest_online")
  isBanned               Boolean                   @default(false) @map("is_banned")
  isVerified             Boolean                   @default(false) @map("is_verified")
  provider               Provider?
  coinHistories          CoinHistory[]
  bookingHistories       BookingHistory[]
  buyCoinRequests        BuyCoinRequest[]
  sellCoinRequests       SellCoinRequest[]
  notices                Notice[]
  posts                  Post[]
  likePosts              LikePost[]
  commentPosts           CommentPost[]
  watchedPosts           WatchedPost[]
  donateProviders        DonateProvider[]
  voucherRedeemedBooking VoucherRedeemedBooking[]
  paymentSystems         UserPaymentSystem[]
  providerRequest        RegisterProviderRequest?
  refreshToken           RefreshTokenUser?
  sensitiveInformation   UserSensitiveInformation?
  verificationRequest    UserVerificationRequest?

  @@map("user")
}

model UserSensitiveInformation {
  id                         Int       @id @default(autoincrement()) @map("id")
  createdAt                  DateTime  @default(now()) @map("created_at")
  userId                     String    @unique @map("user_id")
  user                       User      @relation(fields: [userId], references: [id])
  frontSideCitizenIdImageUrl String    @map("front_side_citizen_id_image_url")
  backSideCitizenIdImageUrl  String    @map("back_side_citizen_id_image_url")
  portraitImageUrl           String    @map("portrait_image_url")
  citizenId                  String    @map("citizen_id")
  citizenIdIssuanceDate      DateTime? @map("citizen_id_issuance_date")
  fullname                   String?   @map("fullname")
  ethnicity                  String?   @map("ethnicity")
  dob                        DateTime? @map("dob")
  permanentResidency         String?   @map("permanent_residency")
  religion                   String?   @map("religion")
  homeTown                   String?   @map("home_town")
  adminId                    String?

  @@map("user_sensitive_information")
}

model UserVerificationRequest {
  id                         Int                @id @default(autoincrement()) @map("id")
  createdAt                  DateTime           @default(now()) @map("created_at")
  userId                     String             @unique @map("user_id")
  user                       User               @relation(fields: [userId], references: [id])
  frontSideCitizenIdImageUrl String             @map("front_side_citizen_id_image_url")
  backSideCitizenIdImageUrl  String             @map("back_side_citizen_id_image_url")
  portraitImageUrl           String             @map("portrait_image_url")
  adminId                    String?            @map("admin_id")
  admin                      Admin?             @relation(fields: [adminId], references: [id])
  lastestHandleTime          DateTime?          @map("last_handle_time")
  verificationStatus         VerificationStatus @default(PENDING) @map("verification_status")

  @@map("user_verification_request")
}

model RefreshTokenUser {
  id           String    @id @default(uuid()) @map("id")
  createdAt    DateTime? @default(now()) @map("created_at")
  updatedAt    DateTime? @updatedAt @map("updated_at")
  deletedAt    DateTime? @map("deleted_at")
  refreshToken String?   @map("refresh_token")
  user         User      @relation(fields: [userId], references: [id])
  userId       String    @unique @map("user_id")

  @@map("refresh_token_user")
}

model Admin {
  id                            String                    @id @default(uuid()) @map("id")
  createdAt                     DateTime?                 @default(now()) @map("created_at")
  updatedAt                     DateTime?                 @updatedAt @map("updated_at")
  deletedAt                     DateTime?                 @map("deleted_at")
  name                          String?                   @map("name") @db.VarChar(80)
  username                      String?                   @map("username") @db.VarChar(20)
  dob                           DateTime?                 @map("dob")
  gender                        Gender                    @default(ORTHER) @map("gender")
  phone                         String?                   @map("phone")
  email                         String?                   @map("email")
  password                      String?                   @map("password")
  avatarUrl                     String?                   @map("avatar_url")
  ipv4                          String?                   @map("ipv4") @db.Char(20)
  refreshTokenAdmin             RefreshTokenAdmin?
  adminRoles                    AdminRole[]
  adminPaymentSystems           AdminPaymentSystem[]
  registerProviderRequests      RegisterProviderRequest[]
  userVerificationRequests      UserVerificationRequest[]
  historyAllocationCoinForUsers CoinHistory[]

  @@map("admin")
}

model RefreshTokenAdmin {
  id           String    @id @default(uuid()) @map("id")
  createdAt    DateTime? @default(now()) @map("created_at")
  updatedAt    DateTime? @updatedAt @map("updated_at")
  deletedAt    DateTime? @map("deleted_at")
  refreshToken String?   @map("refresh_token")
  admin        Admin     @relation(fields: [adminId], references: [id])
  adminId      String    @unique @map("admin_id")

  @@map("refresh_token_admin")
}

model AdminRole {
  id        String        @id @default(uuid()) @map("id")
  createdAt DateTime?     @default(now()) @map("created_at")
  updatedAt DateTime?     @updatedAt @map("updated_at")
  deletedAt DateTime?     @map("deleted_at")
  admin     Admin         @relation(fields: [adminId], references: [id])
  adminId   String        @map("admin_id")
  roleType  AdminRoleType @map("role_type")

  @@map("admin_role")
}

model AdminPaymentSystem {
  id               String                   @id @default(uuid()) @map("id")
  createdAt        DateTime?                @default(now()) @map("created_at")
  updatedAt        DateTime?                @updatedAt @map("updated_at")
  deletedAt        DateTime?                @map("deleted_at")
  admin            Admin                    @relation(fields: [adminId], references: [id])
  adminId          String                   @map("admin_id")
  platform         PaymentSystemPlatform    @map("platform")
  platformAccount  String?                  @map("platform_account")
  beneficiary      String?                  @map("beneficiary")
  isCashierAccount Boolean?                 @default(false) @map("is_cashier_account")
  isReady          Boolean?                 @default(false) @map("is_ready")
  isDefault        Boolean?                 @default(false) @map("is_default")
  status           AdminPaymentSystemStatus @default(INIT) @map("status")

  @@map("admin_payment_system")
}

model UserPaymentSystem {
  id              String                @id @default(uuid()) @map("id")
  createdAt       DateTime?             @default(now()) @map("created_at")
  updatedAt       DateTime?             @updatedAt @map("updated_at")
  deletedAt       DateTime?             @map("deleted_at")
  user            User                  @relation(fields: [userId], references: [id])
  userId          String                @map("user_id")
  platform        PaymentSystemPlatform @map("platform")
  platformAccount String?               @map("platform_account")
  beneficiary     String?               @map("beneficiary")

  @@map("user_payment_system")
}

model PaymentQrSetting {
  id        String                 @id @default(uuid()) @map("id")
  createdAt DateTime?              @default(now()) @map("created_at")
  updatedAt DateTime?              @updatedAt @map("updated_at")
  deletedAt DateTime?              @map("deleted_at")
  regex     String?                @map("regex")
  platform  PaymentSystemPlatform? @map("system_platform")

  @@map("payemt_qr_setting")
}

model Provider {
  id              String           @id @default(uuid()) @map("id")
  createdAt       DateTime?        @default(now()) @map("created_at")
  updatedAt       DateTime?        @updatedAt @map("updated_at")
  deletedAt       DateTime?        @map("deleted_at")
  user            User             @relation(fields: [userId], references: [id])
  userId          String           @unique @map("user_id")
  slug            String?          @map("slug")
  name            String?          @map("name")
  avatarUrl       String?          @map("avatar_url")
  voiceUrl        String?          @map("voice_url")
  description     String?          @map("description") @db.Text()
  status          ProviderStatus?  @default(UNACTIVATED) @map("status")
  isBanned        Boolean          @default(false) @map("is_banned")
  providerSkills  ProviderSkill[]
  donateProviders DonateProvider[]
  vouchers        Voucher[]

  @@map("provider")
}

model RegisterProviderRequest {
  id              String                        @id @default(uuid()) @map("id")
  createdAt       DateTime?                     @default(now()) @map("created_at")
  updatedAt       DateTime?                     @updatedAt @map("updated_at")
  deletedAt       DateTime?                     @map("deleted_at")
  user            User                          @relation(fields: [userId], references: [id])
  userId          String                        @unique @map("user_id")
  admin           Admin?                        @relation(fields: [adminId], references: [id])
  adminId         String?                       @map("admin_id")
  slug            String?                       @map("slug")
  name            String?                       @map("name")
  avatarUrl       String?                       @map("avatar_url")
  voiceUrl        String?                       @map("voice_url")
  description     String?                       @map("description") @db.Text()
  citizenIdImages String[]                      @default([]) @map("citizen_id_image")
  status          RegisterProviderRequestStatus @default(PENDING) @map("status")
  adminNoted      String?                       @map("admin_noted") @db.Text()

  @@map("register_provider_request")
}

model Skill {
  id             String          @id @default(uuid()) @map("id")
  createdAt      DateTime?       @default(now()) @map("created_at")
  updatedAt      DateTime?       @updatedAt @map("updated_at")
  deletedAt      DateTime?       @map("deleted_at")
  name           String          @map("name")
  imageUrl       String?         @map("image_url")
  providerSkills ProviderSkill[]
  slug           String?         @map("slug")

  @@map("skill")
}

model ProviderSkill {
  id               String           @id @default(uuid()) @map("id")
  createdAt        DateTime?        @default(now()) @map("created_at")
  updatedAt        DateTime?        @updatedAt @map("updated_at")
  deletedAt        DateTime?        @map("deleted_at")
  provider         Provider         @relation(fields: [providerId], references: [id])
  providerId       String           @map("provider_id")
  skill            Skill            @relation(fields: [skillId], references: [id])
  skillId          String           @map("skill_id")
  defaultCost      Float            @map("default_cost")
  description      String?          @map("description") @db.Text()
  position         Int              @map("position")
  bookingCosts     BookingCost[]
  bookingHistories BookingHistory[]

  @@map("provider_skill")
}

model BookingCost {
  id              String        @id @default(uuid()) @map("id")
  createdAt       DateTime?     @default(now()) @map("created_at")
  updatedAt       DateTime?     @updatedAt @map("updated_at")
  deletedAt       DateTime?     @map("deleted_at")
  providerSkill   ProviderSkill @relation(fields: [providerSkillId], references: [id])
  providerSkillId String        @map("provider_skill_id")
  startTimeOfDay  String?       @map("start_time_of_day")
  endTimeOfDay    String?       @map("end_time_of_day")
  amount          Float?        @map("amount")

  @@map("booking_cost")
}

model CoinHistory {
  id              String           @id @default(uuid()) @map("id")
  createdAt       DateTime?        @default(now()) @map("created_at")
  updatedAt       DateTime?        @updatedAt @map("updated_at")
  deletedAt       DateTime?        @map("deleted_at")
  user            User             @relation(fields: [userId], references: [id])
  userId          String           @map("user_id")
  coinType        CoinType?        @map("coin_type")
  amount          Float?           @map("amount")
  adminCreated    Admin?           @relation(fields: [adminIdCreated], references: [id])
  adminIdCreated  String?          @map("admin_id_created")
  bookingId       String?          @map("booking_id")
  booking         BookingHistory?  @relation(fields: [bookingId], references: [id])
  donateId        String?          @map("donate_id")
  donate          DonateProvider?  @relation(fields: [donateId], references: [id])
  buyCoinRequest  BuyCoinRequest?
  sellCoinRequest SellCoinRequest?

  @@map("coin_history")
}

model BookingHistory {
  id                      String                   @id @default(uuid()) @map("id")
  createdAt               DateTime?                @default(now()) @map("created_at")
  updatedAt               DateTime?                @updatedAt @map("updated_at")
  deletedAt               DateTime?                @map("deleted_at")
  status                  BookingStatus            @map("status")
  acceptedAt              DateTime?                @map("accepted_at")
  booker                  User?                    @relation(fields: [bookerId], references: [id])
  bookerId                String?                  @map("booker_id")
  providerSkill           ProviderSkill?           @relation(fields: [providerSkillId], references: [id])
  providerSkillId         String?                  @map("provider_skill_id")
  totalCost               Float                    @map("total_cost")
  bookingPeriod           Int                      @map("booking_period")
  appliedVoucherIds       String[]                 @default([]) @map("applied_voucher_ids")
  providerReceivedCoin    Boolean                  @default(false) @map("provider_received_coin")
  feedbacks               Feedback[]
  voucherRedeemedBookings VoucherRedeemedBooking[]
  ReportBooking           ReportBooking[]
  coinHistory             CoinHistory[]

  @@map("booking_history")
}

model VoucherRedeemedBooking {
  id                 String         @id @default(uuid()) @map("id")
  createdAt          DateTime?      @default(now()) @map("created_at")
  updatedAt          DateTime?      @updatedAt @map("updated_at")
  deletedAt          DateTime?      @map("deleted_at")
  voucher            Voucher        @relation(fields: [voucherId], references: [id])
  voucherId          String         @map("voucher_id")
  booker             User           @relation(fields: [bookerId], references: [id])
  bookerId           String         @map("booker_id")
  booking            BookingHistory @relation(fields: [bookingHistoryId], references: [id])
  bookingHistoryId   String         @map("booking_history_id")
  totalDiscountValue Int            @default(0) @map("total_discount_value")
  totalCashbackValue Int            @default(0) @map("total_cashback_value")

  @@map("voucher_redeemed_booking")
}

model Voucher {
  id                               String                   @id @default(uuid()) @map("id")
  createdAt                        DateTime?                @default(now()) @map("created_at")
  updatedAt                        DateTime?                @updatedAt @map("updated_at")
  deletedAt                        DateTime?                @map("deleted_at")
  provider                         Provider?                @relation(fields: [providerId], references: [id])
  providerId                       String?                  @map("provider_id")
  code                             String?                  @unique @map("code")
  image                            String?                  @map("image")
  content                          String?                  @map("content")
  description                      String?                  @map("description")
  numberIssued                     Int?                     @map("number_issued")
  dailyNumberIssued                Int?                     @map("daily_number_issued")
  numberUsablePerBooker            Int?                     @map("number_usable_per_booker")
  dailyUsageLimitPerBooker         Int?                     @map("daily_usage_limit_per_booker")
  isActivated                      Boolean                  @default(false) @map("is_activated")
  type                             VoucherType              @default(DISCOUNT) @map("type")
  discountUnit                     DiscountUnit             @default(PERCENT) @map("discount_unit")
  discountValue                    Int                      @default(0) @map("discount_value")
  maximumDiscountValue             Int?                     @map("maximum_discount_value")
  minimumBookingTotalPriceForUsage Int?                     @default(0) @map("minimum_booking_total_price_for_usage")
  minimumBookingDurationForUsage   Int?                     @default(0) @map("minimum_booking_duration_for_sage")
  startDate                        DateTime?                @map("start_date")
  endDate                          DateTime?                @map("end_date")
  applyISODayOfWeek                Int[]                    @default([1, 2, 3, 4, 5, 6, 7]) @map("apply_iso_day_of_week") //Monday is 1, Tuesday is 2, through to 7 for Sunday.
  recipientType                    VoucherRecipientType     @default(ALL) @map("recipient_type")
  selectiveBookerIds               String[]                 @default([]) @map("selective_booker_id")
  isHided                          Boolean                  @default(false) @map("is_hided")
  voucherRedeemedBookings          VoucherRedeemedBooking[]

  @@map("voucher")
}

model Feedback {
  id         String         @id @default(uuid()) @map("id")
  createdAt  DateTime?      @default(now()) @map("created_at")
  updatedAt  DateTime?      @updatedAt @map("updated_at")
  deletedAt  DateTime?      @map("deleted_at")
  booking    BookingHistory @relation(fields: [bookingId], references: [id])
  bookingId  String         @map("booking_id")
  content    String?        @map("content")
  amountStar Int?           @map("amount_star")

  @@map("feedback")
}

model ReportBooking {
  id         String         @id @default(uuid()) @map("id")
  createdAt  DateTime?      @default(now()) @map("created_at")
  updatedAt  DateTime?      @updatedAt @map("updated_at")
  deletedAt  DateTime?      @map("deleted_at")
  booking    BookingHistory @relation(fields: [bookingId], references: [id])
  bookingId  String         @map("booking_id")
  content    String?        @map("content")
  amountStar Int?           @map("amount_star")

  @@map("report_booking")
}

model BuyCoinRequest {
  id              String                 @id @default(uuid()) @map("id")
  createdAt       DateTime?              @default(now()) @map("created_at")
  updatedAt       DateTime?              @updatedAt @map("updated_at")
  deletedAt       DateTime?              @map("deleted_at")
  amountMoney     Int?                   @map("amount_money")
  amountCoin      Float?                 @map("amount_coin")
  unitCurrency    UnitCurrency?          @map("unit_currency")
  requester       User                   @relation(fields: [requesterId], references: [id])
  requesterId     String                 @map("requester_id")
  qrString        String?                @map("qr_string")
  coinHistory     CoinHistory?           @relation(fields: [coinHistoryId], references: [id])
  coinHistoryId   String?                @unique @map("coin_history_id")
  status          BuyCoinRequestStatus   @default(INIT) @map("status")
  handlerId       String?                @map("handler_id")
  handlerFeedback String?                @map("handler_feedback")
  billImageUrl    String?                @map("bill_image_url")
  platform        PaymentSystemPlatform? @map("platform")
  transactionCode String?                @unique() @map("transcaction_code")
  content         String?                @map("content")
  beneficiary     String?                @map("beneficiary")

  @@map("buy_coin_request")
}

model SellCoinRequest {
  id              String                 @id @default(uuid()) @map("id")
  createdAt       DateTime?              @default(now()) @map("created_at")
  updatedAt       DateTime?              @updatedAt @map("updated_at")
  deletedAt       DateTime?              @map("deleted_at")
  content         String?                @map("content")
  amountMoney     Int?                   @map("amount_money")
  amountCoin      Float?                 @map("amount_coin")
  unitCurrency    UnitCurrency?          @map("unit_currency")
  requester       User                   @relation(fields: [requesterId], references: [id])
  requesterId     String                 @map("requester_id")
  qrContent       String?                @map("qr_content")
  coinHistory     CoinHistory?           @relation(fields: [coinHistoryId], references: [id])
  coinHistoryId   String?                @unique @map("coin_history_id")
  status          SellCoinRequestStatus? @default(PENDING) @map("status")
  handlerId       String?                @map("handler_id")
  handlerFeedback String?                @map("handler_feedback")
  billImageUrl    String?                @map("bill_image_url")

  @@map("withdrawal_request")
}

model Notice {
  id        String      @id @default(uuid()) @map("id")
  createdAt DateTime?   @default(now()) @map("created_at")
  updatedAt DateTime?   @updatedAt @map("updated_at")
  deletedAt DateTime?   @map("deleted_at")
  type      NoticeType? @map("notice_type")
  user      User        @relation(fields: [userId], references: [id])
  userId    String      @unique @map("user_id")
  data      Json?       @map("data")
  isReaded  Boolean?    @default(false) @map("is_readed")

  @@map("notice")
}

model Banner {
  id        String        @id @default(uuid()) @map("id")
  createdAt DateTime?     @default(now()) @map("created_at")
  updatedAt DateTime?     @updatedAt @map("updated_at")
  deletedAt DateTime?     @map("deleted_at")
  imageUrl  String?       @map("image_url")
  position  Int?          @map("position")
  status    BannerStatus? @map("status")

  @@map("banner")
}

model CoinSetting {
  id                    String                 @id @default(uuid()) @map("id")
  createdAt             DateTime?              @default(now()) @map("created_at")
  updatedAt             DateTime?              @updatedAt @map("updated_at")
  deletedAt             DateTime?              @map("deleted_at")
  coinSettingType       CoinSettingType?       @map("coin_setting_type")
  paymentSystemPlatform PaymentSystemPlatform? @map("payment_system_platform")
  unitCurrency          UnitCurrency?          @map("unit_currency")
  conversionRateCoin    Float?                 @map("conversion_rate_coin")
  feePercentage         Float?                 @default(0) @map("fee")
  surcharge             Float?                 @default(0) @map("surcharge")

  @@map("coin_setting")
}

model Post {
  id           String        @id @default(uuid()) @map("id")
  createdAt    DateTime?     @default(now()) @map("created_at")
  updatedAt    DateTime?     @updatedAt @map("updated_at")
  deletedAt    DateTime?     @map("deleted_at")
  user         User          @relation(fields: [userId], references: [id])
  userId       String        @map("user_id")
  content      String?       @map("content") @db.Text()
  thumbnails   Json[]        @default([]) @map("thumbnails")
  likePosts    LikePost[]
  commentPosts CommentPost[]
  watchedPosts WatchedPost[]

  @@map("post")
}

model LikePost {
  id        String    @id @default(uuid()) @map("id")
  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @map("user_id")
  post      Post      @relation(fields: [postId], references: [id])
  postId    String    @map("post_id")

  @@map("like_post")
}

model CommentPost {
  id              String        @id @default(uuid()) @map("id")
  createdAt       DateTime?     @default(now()) @map("created_at")
  updatedAt       DateTime?     @updatedAt @map("updated_at")
  deletedAt       DateTime?     @map("deleted_at")
  user            User          @relation(fields: [userId], references: [id])
  userId          String        @map("user_id")
  post            Post          @relation(fields: [postId], references: [id])
  postId          String        @map("post_id")
  content         String?       @map("content")
  parentComment   CommentPost?  @relation("parent_comment", fields: [parentCommentId], references: [id])
  parentCommentId String?       @map("parent_comment_id")
  replies         CommentPost[] @relation("parent_comment")

  @@map("comment_post")
}

model WatchedPost {
  id        String    @id @default(uuid()) @map("id")
  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @map("user_id")
  post      Post      @relation(fields: [postId], references: [id])
  postId    String    @map("post_id")

  @@map("watched_post")
}

model DonateProvider {
  id                    String        @id @default(uuid()) @map("id")
  createdAt             DateTime?     @default(now()) @map("created_at")
  updatedAt             DateTime?     @updatedAt @map("updated_at")
  deletedAt             DateTime?     @map("deleted_at")
  user                  User          @relation(fields: [userId], references: [id])
  userId                String        @map("user_id")
  donateAmount          Float         @map("donate_amount")
  provider              Provider      @relation(fields: [providerId], references: [id])
  providerId            String        @map("provider_id")
  actualReceivingAmount Float         @map("actual_receiving_amount")
  message               String?       @map("message")
  CoinHistory           CoinHistory[]

  @@map("donate_provider")
}

enum CoinType {
  SPEND_BOOKING
  SPEND_GIFT
  SPEND_DONATE
  GET_BOOKING
  GET_DONATE
  GET_GIFT
  BUY_COIN
  GET_MISSION
  WITHDRAW
  ADMIN
}

enum LoginType {
  INAPP
  FACEBOOK
  GOOGLE
  KAKAO
  APPLE
  PHONE
}

enum AdminRoleType {
  SUPERADMIN
  ADMIN
  COLLABORATOR
  CASHIER
}

enum Gender {
  MALE
  FEMALE
  ORTHER
  PRIVATE
}

enum PaymentSystemPlatform {
  MOMO
  VNPAY
  ZALOPAY
  TPB
  BIDV
}

enum AdminPaymentSystemStatus {
  INIT
  APPROVED
  REJECTED
}

enum BookingStatus {
  INIT
  USER_CANCEL
  PROVIDER_CANCEL
  PROVIDER_ACCEPT
  PROVIDER_FINISH_SOON
  USER_FINISH_SOON
}

enum UnitCurrency {
  VND
  USD
}

enum BuyCoinRequestStatus {
  INIT
  USER_NOTICES_PAID
  PENDING
  REJECTED
  APPROVED
}

enum SellCoinRequestStatus {
  PENDING
  CANCEL
  REJECTED
  COMPLETED
}

enum BannerStatus {
  INIT
  ACTIVATED
  UNACTIVATED
}

enum CoinSettingType {
  BUY_COIN
  SELL_COIN
  PROVIDER_GET_COIN_BOOKING
  GIFT_TO_COIN
  PROVIDER_GET_COIN_DONATE
}

enum NoticeType {
  NEW_MESSAGE
  HAVE_BOOKING
  BOOKING_HAS_BEEN_DECLINED
  BOOKING_HAS_BEEN_SUCCESSED
  SOMEONE_FOLLOWING_YOU
}

enum VoucherType {
  DISCOUNT
  CASHBACK
}

enum DiscountUnit {
  CASH
  PERCENT
}

enum VoucherRecipientType {
  ALL
  FIRST_TIME_BOOKING
  PREVIOUS_BOOKING
  SELECTIVE_BOOKER
  TOP_5_BOOKER
  TOP_10_BOOKER
}

enum RegisterProviderRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ProviderStatus {
  ACTIVATED
  UNACTIVATED
  STOPPED_ACCEPTING_BOOKING
  BUSY
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
}
