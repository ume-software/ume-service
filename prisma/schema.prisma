generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_WITH_SCHEMA")
}

model User {
  id                         String                   @id @default(uuid()) @map("id")
  createdAt                  DateTime?                @default(now()) @map("created_at")
  updatedAt                  DateTime?                @updatedAt @map("updated_at")
  deletedAt                  DateTime?                @map("deleted_at")
  slug                       String?                  @unique() @map("slug") @db.VarChar(80)
  name                       String?                  @map("name") @db.VarChar(80)
  username                   String?                  @unique() @map("username") @db.VarChar(80)
  dob                        DateTime?                @map("dob")
  gender                     Gender                   @default(OTHER) @map("gender")
  phone                      String?                  @unique() @map("phone") @db.VarChar(25)
  email                      String?                  @unique() @map("email") @db.VarChar(80)
  password                   String?                  @map("password") @db.VarChar(80)
  loginType                  LoginType                @default(INAPP) @map("login_type")
  avatarUrl                  String?                  @map("avatar_url")
  ipv4                       String?                  @map("ipv4") @db.Char(40)
  isOnline                   Boolean?                 @default(false) @map("is_online")
  latestOnline               DateTime?                @map("latest_online")
  isBanned                   Boolean                  @default(false) @map("is_banned")
  isVerified                 Boolean                  @default(false) @map("is_verified")
  isProvider                 Boolean                  @default(false) @map("is_provider")
  isAllowNotificationToEmail Boolean                  @default(true) @map("is_allow_notification_to_email")
  isAllowNotificationMessage Boolean                  @default(true) @map("is_allow_notification_message")
  isAllowNotificationCall    Boolean                  @default(true) @map("is_allow_notification_call")
  providerConfig             ProviderConfig?
  balanceHistories           BalanceHistory[]
  bookingHistories           BookingHistory[]
  depositRequests            DepositRequest[]
  withdrawalRequests         WithdrawalRequest[]
  notices                    Notice[]
  posts                      Post[]
  likePosts                  LikePost[]
  commentPosts               CommentPost[]
  watchedPosts               WatchedPost[]
  donorDonations             Donation[]               @relation("DonorDonations")
  recipientDonations         Donation[]               @relation("RecipientDonations")
  voucherRedeemedBooking     VoucherRedeemedBooking[]
  paymentSystems             UserPaymentSystem[]
  refreshToken               RefreshTokenUser?
  verificationRequest        UserKYCRequest?
  providerServices           ProviderService[]
  vouchers                   Voucher[]
  reportingUsers             ReportUser[]             @relation("ReportingUsers")
  reportedUsers              ReportUser[]             @relation("ReportedUsers")
  follows                    Follow[]                 @relation("UserFollows")
  followers                  Follow[]                 @relation("UserFollowers")
  instantCards               InstantCard[]

  @@map("user")
}

model Follow {
  id          String    @id @default(uuid()) @map("id")
  createdAt   DateTime? @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")
  follower    User      @relation("UserFollows", fields: [followerId], references: [id])
  followerId  String    @map("follower_id")
  following   User      @relation("UserFollowers", fields: [followingId], references: [id])
  followingId String    @map("following_id")

  @@map("follow")
}

model ProviderConfig {
  id          String          @id @default(uuid()) @map("id")
  createdAt   DateTime?       @default(now()) @map("created_at")
  updatedAt   DateTime?       @updatedAt @map("updated_at")
  deletedAt   DateTime?       @map("deleted_at")
  user        User            @relation(fields: [userId], references: [id])
  userId      String          @unique @map("user_id")
  voiceUrl    String?         @map("voice_url")
  description String?         @map("description") @db.Text()
  status      ProviderStatus? @default(UN_ACTIVATED) @map("status")
  isBanned    Boolean         @default(false) @map("is_banned")

  @@map("provider_config")
}

model UserKYCRequest {
  id                         String        @id @default(uuid()) @map("id")
  createdAt                  DateTime      @default(now()) @map("created_at")
  updatedAt                  DateTime?     @updatedAt @map("updated_at")
  deletedAt                  DateTime?     @map("deleted_at")
  userId                     String        @unique @map("user_id")
  user                       User          @relation(fields: [userId], references: [id])
  frontSideCitizenIdImageUrl String        @map("front_side_citizen_id_image_url")
  backSideCitizenIdImageUrl  String        @map("back_side_citizen_id_image_url")
  portraitImageUrl           String        @map("portrait_image_url")
  adminId                    String?       @map("admin_id")
  admin                      Admin?        @relation(fields: [adminId], references: [id])
  lastestHandleTime          DateTime?     @map("last_handle_time")
  userKYCStatus              UserKYCStatus @default(PENDING) @map("verification_status")
  citizenId                  String?       @map("citizen_id")
  citizenName                String?       @map("citizen_name")
  citizenDob                 DateTime?     @map("citizen_dob")
  citizenGender              Gender?       @default(PRIVATE) @map("citizen_gender")

  @@map("user_kyc_request")
}

model RefreshTokenUser {
  id           String    @id @default(uuid()) @map("id")
  createdAt    DateTime? @default(now()) @map("created_at")
  updatedAt    DateTime? @updatedAt @map("updated_at")
  deletedAt    DateTime? @map("deleted_at")
  refreshToken String?   @map("refresh_token")
  user         User      @relation(fields: [userId], references: [id])
  userId       String    @unique @map("user_id")

  @@map("refresh_token_user")
}

model Admin {
  id                               String               @id @default(uuid()) @map("id")
  createdAt                        DateTime?            @default(now()) @map("created_at")
  updatedAt                        DateTime?            @updatedAt @map("updated_at")
  deletedAt                        DateTime?            @map("deleted_at")
  name                             String?              @map("name") @db.VarChar(80)
  username                         String?              @map("username") @db.VarChar(20)
  dob                              DateTime?            @map("dob")
  gender                           Gender               @default(OTHER) @map("gender")
  phone                            String?              @map("phone")
  email                            String?              @map("email")
  password                         String?              @map("password")
  avatarUrl                        String?              @map("avatar_url")
  isActivated                      Boolean?             @default(true) @map("is_activated")
  ipv4                             String?              @map("ipv4") @db.Char(20)
  refreshTokenAdmin                RefreshTokenAdmin?
  adminRoles                       AdminRole[]
  adminPaymentSystems              AdminPaymentSystem[]
  userVerificationRequests         UserKYCRequest[]
  historyAllocationBalanceForUsers BalanceHistory[]
  voucher                          Voucher[]
  depositRequest                   DepositRequest[]

  @@map("admin")
}

model RefreshTokenAdmin {
  id           String    @id @default(uuid()) @map("id")
  createdAt    DateTime? @default(now()) @map("created_at")
  updatedAt    DateTime? @updatedAt @map("updated_at")
  deletedAt    DateTime? @map("deleted_at")
  refreshToken String?   @map("refresh_token")
  admin        Admin     @relation(fields: [adminId], references: [id])
  adminId      String    @unique @map("admin_id")

  @@map("refresh_token_admin")
}

model AdminRole {
  id        String        @id @default(uuid()) @map("id")
  createdAt DateTime?     @default(now()) @map("created_at")
  updatedAt DateTime?     @updatedAt @map("updated_at")
  deletedAt DateTime?     @map("deleted_at")
  admin     Admin         @relation(fields: [adminId], references: [id])
  adminId   String        @map("admin_id")
  roleType  AdminRoleType @map("role_type")

  @@map("admin_role")
}

model AdminPaymentSystem {
  id               String                   @id @default(uuid()) @map("id")
  createdAt        DateTime?                @default(now()) @map("created_at")
  updatedAt        DateTime?                @updatedAt @map("updated_at")
  deletedAt        DateTime?                @map("deleted_at")
  admin            Admin                    @relation(fields: [adminId], references: [id])
  adminId          String                   @map("admin_id")
  platform         PaymentSystemPlatform    @map("platform")
  platformAccount  String?                  @map("platform_account")
  beneficiary      String?                  @map("beneficiary")
  isCashierAccount Boolean?                 @default(false) @map("is_cashier_account")
  isReady          Boolean?                 @default(false) @map("is_ready")
  isDefault        Boolean?                 @default(false) @map("is_default")
  status           AdminPaymentSystemStatus @default(INIT) @map("status")

  @@map("admin_payment_system")
}

model UserPaymentSystem {
  id                 String                @id @default(uuid()) @map("id")
  createdAt          DateTime?             @default(now()) @map("created_at")
  updatedAt          DateTime?             @updatedAt @map("updated_at")
  deletedAt          DateTime?             @map("deleted_at")
  user               User                  @relation(fields: [userId], references: [id])
  userId             String                @map("user_id")
  platform           PaymentSystemPlatform @map("platform")
  platformAccount    String?               @map("platform_account")
  beneficiary        String?               @map("beneficiary")
  withdrawalRequests WithdrawalRequest[]

  @@map("user_payment_system")
}

model PaymentQrSetting {
  id        String                 @id @default(uuid()) @map("id")
  createdAt DateTime?              @default(now()) @map("created_at")
  updatedAt DateTime?              @updatedAt @map("updated_at")
  deletedAt DateTime?              @map("deleted_at")
  regex     String?                @map("regex")
  platform  PaymentSystemPlatform? @map("system_platform")

  @@map("payemt_qr_setting")
}

model Service {
  id          String    @id @default(uuid()) @map("id")
  createdAt   DateTime? @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")
  name        String    @map("name")
  viName      String?   @map("vi_name")
  imageUrl    String?   @map("image_url")
  slug        String?   @map("slug")
  isActivated Boolean   @default(true) @map("is_activated")

  providerServices  ProviderService[]
  serviceAttributes ServiceAttribute[]

  @@map("service")
}

model ServiceAttribute {
  id                       String                     @id @default(uuid()) @map("id")
  createdAt                DateTime?                  @default(now()) @map("created_at")
  updatedAt                DateTime?                  @updatedAt @map("updated_at")
  deletedAt                DateTime?                  @map("deleted_at")
  service                  Service                    @relation(fields: [serviceId], references: [id])
  serviceId                String                     @map("service_id")
  attribute                String                     @map("attribute")
  viAttribute              String?                    @map("vi_attribute")
  isActivated              Boolean                    @default(true) @map("is_activated")
  serviceAttributeValues   ServiceAttributeValue[]
  ProviderServiceAttribute ProviderServiceAttribute[]

  @@map("service_attribute")
}

model ServiceAttributeValue {
  id                             String                          @id @default(uuid()) @map("id")
  createdAt                      DateTime?                       @default(now()) @map("created_at")
  updatedAt                      DateTime?                       @updatedAt @map("updated_at")
  deletedAt                      DateTime?                       @map("deleted_at")
  serviceAttribute               ServiceAttribute                @relation(fields: [serviceAttributeId], references: [id])
  serviceAttributeId             String                          @map("service_attribute_id")
  value                          String                          @map("value")
  viValue                        String?                         @map("vi_value")
  isActivated                    Boolean                         @default(true) @map("is_activated")
  providerServiceAttributeValues ProviderServiceAttributeValue[]

  @@map("service_attribute_value")
}

model ProviderService {
  id                        String                     @id @default(uuid()) @map("id")
  createdAt                 DateTime?                  @default(now()) @map("created_at")
  updatedAt                 DateTime?                  @updatedAt @map("updated_at")
  deletedAt                 DateTime?                  @map("deleted_at")
  provider                  User                       @relation(fields: [providerId], references: [id])
  providerId                String                     @map("provider_id")
  service                   Service                    @relation(fields: [serviceId], references: [id])
  serviceId                 String                     @map("service_id")
  defaultCost               Float                      @map("default_cost")
  description               String?                    @map("description") @db.Text()
  position                  Int                        @map("position")
  bookingCosts              BookingCost[]
  bookingHistories          BookingHistory[]
  providerServiceAttributes ProviderServiceAttribute[]

  @@map("provider_service")
}

model ProviderServiceAttribute {
  id                             String                          @id @default(uuid()) @map("id")
  createdAt                      DateTime?                       @default(now()) @map("created_at")
  updatedAt                      DateTime?                       @updatedAt @map("updated_at")
  deletedAt                      DateTime?                       @map("deleted_at")
  providerService                ProviderService                 @relation(fields: [providerServiceId], references: [id])
  providerServiceId              String                          @map("provider_service_id")
  serviceAttribute               ServiceAttribute                @relation(fields: [serviceAttributeId], references: [id])
  serviceAttributeId             String                          @map("service_attribute_id")
  providerServiceAttributeValues ProviderServiceAttributeValue[]

  @@map("provider_service_attribute")
}

model ProviderServiceAttributeValue {
  id                         String                   @id @default(uuid()) @map("id")
  createdAt                  DateTime?                @default(now()) @map("created_at")
  updatedAt                  DateTime?                @updatedAt @map("updated_at")
  deletedAt                  DateTime?                @map("deleted_at")
  providerServiceAttribute   ProviderServiceAttribute @relation(fields: [providerServiceAttributeId], references: [id])
  providerServiceAttributeId String                   @map("provider_service_attribute_id")
  serviceAttributeValue      ServiceAttributeValue    @relation(fields: [serviceAttributeValueId], references: [id])
  serviceAttributeValueId    String                   @map("service_attribute_value_id")

  @@map("provider_service_attribute_value")
}

model BookingCost {
  id                String          @id @default(uuid()) @map("id")
  createdAt         DateTime?       @default(now()) @map("created_at")
  updatedAt         DateTime?       @updatedAt @map("updated_at")
  deletedAt         DateTime?       @map("deleted_at")
  providerService   ProviderService @relation(fields: [providerServiceId], references: [id])
  providerServiceId String          @map("provider_service_id")
  startTimeOfDay    String?         @map("start_time_of_day")
  endTimeOfDay      String?         @map("end_time_of_day")
  amount            Float?          @map("amount")

  @@map("booking_cost")
}

model BalanceHistory {
  id                String             @id @default(uuid()) @map("id")
  createdAt         DateTime?          @default(now()) @map("created_at")
  updatedAt         DateTime?          @updatedAt @map("updated_at")
  deletedAt         DateTime?          @map("deleted_at")
  user              User               @relation(fields: [userId], references: [id])
  userId            String             @map("user_id")
  balanceType       BalanceType?       @map("balance_type")
  amount            Float?             @map("amount")
  adminCreated      Admin?             @relation(fields: [adminIdCreated], references: [id])
  adminIdCreated    String?            @map("admin_id_created")
  bookingId         String?            @map("booking_id")
  booking           BookingHistory?    @relation(fields: [bookingId], references: [id])
  donationId        String?            @map("donation_id")
  donation          Donation?          @relation(fields: [donationId], references: [id])
  depositRequest    DepositRequest?
  withdrawalRequest WithdrawalRequest?

  @@map("balance_history")
}

model BookingHistory {
  id                      String                   @id @default(uuid()) @map("id")
  createdAt               DateTime?                @default(now()) @map("created_at")
  updatedAt               DateTime?                @updatedAt @map("updated_at")
  deletedAt               DateTime?                @map("deleted_at")
  status                  BookingStatus            @map("status")
  acceptedAt              DateTime?                @map("accepted_at")
  booker                  User?                    @relation(fields: [bookerId], references: [id])
  bookerId                String?                  @map("booker_id")
  providerService         ProviderService?         @relation(fields: [providerServiceId], references: [id])
  providerServiceId       String?                  @map("provider_service_id")
  totalCost               Float                    @map("total_cost")
  bookingPeriod           Int                      @map("booking_period")
  appliedVoucherIds       String[]                 @default([]) @map("applied_voucher_ids")
  providerReceivedBalance Float?                   @map("provider_received_balance")
  isProcessingComplaint   Boolean                  @default(false) @map("is_processing_complaint")
  isRefund                Boolean                  @default(false) @map("is_refund")
  feedback                Feedback?
  voucherRedeemedBookings VoucherRedeemedBooking[]
  balanceHistories        BalanceHistory[]
  bookingComplaint        BookingComplaint?

  @@map("booking_history")
}

model BookingComplaint {
  id                        String                     @id @default(uuid()) @map("id")
  createdAt                 DateTime?                  @default(now()) @map("created_at")
  updatedAt                 DateTime?                  @updatedAt @map("updated_at")
  deletedAt                 DateTime?                  @map("deleted_at")
  booking                   BookingHistory             @relation(fields: [bookingHistoryId], references: [id])
  bookingHistoryId          String                     @unique @map("booking_history_id")
  complaintDescription      String                     @map("complaint_description")
  complaintStatus           BookingComplaintStatus     @map("complaint_status")
  complaintType             BookingComplaintType       @map("complaint_type")
  attachments               Json[]                     @default([]) @map("attachments")
  sendedToProviderAt        DateTime?                  @map("sended_to_provider_at")
  bookingComplaintResponses BookingComplaintResponse[]

  @@map("booking_complaint")
}

model BookingComplaintResponse {
  id                           String                       @id @default(uuid()) @map("id")
  createdAt                    DateTime?                    @default(now()) @map("created_at")
  updatedAt                    DateTime?                    @updatedAt @map("updated_at")
  deletedAt                    DateTime?                    @map("deleted_at")
  bookingComplaint             BookingComplaint             @relation(fields: [bookingComplaintId], references: [id])
  bookingComplaintId           String                       @map("booking_complaint_id")
  bookingComplaintResponseType BookingComplaintResponseType @map("booking_complaint_response_type")
  responseMessage              String                       @map("response_message") @db.Text()
  attachments                  Json[]                       @default([]) @map("attachments")

  @@map("booking_complaint_response")
}

model VoucherRedeemedBooking {
  id                 String         @id @default(uuid()) @map("id")
  createdAt          DateTime?      @default(now()) @map("created_at")
  updatedAt          DateTime?      @updatedAt @map("updated_at")
  deletedAt          DateTime?      @map("deleted_at")
  voucher            Voucher        @relation(fields: [voucherId], references: [id])
  voucherId          String         @map("voucher_id")
  booker             User           @relation(fields: [bookerId], references: [id])
  bookerId           String         @map("booker_id")
  booking            BookingHistory @relation(fields: [bookingHistoryId], references: [id])
  bookingHistoryId   String         @map("booking_history_id")
  totalDiscountValue Int            @default(0) @map("total_discount_value")
  totalCashbackValue Int            @default(0) @map("total_cashback_value")

  @@map("voucher_redeemed_booking")
}

model Voucher {
  id                               String               @id @default(uuid()) @map("id")
  createdAt                        DateTime?            @default(now()) @map("created_at")
  updatedAt                        DateTime?            @updatedAt @map("updated_at")
  deletedAt                        DateTime?            @map("deleted_at")
  provider                         User?                @relation(fields: [providerId], references: [id])
  providerId                       String?              @map("provider_id")
  admin                            Admin?               @relation(fields: [adminId], references: [id])
  adminId                          String?              @map("admin_id")
  code                             String?              @unique @map("code")
  image                            String?              @map("image")
  name                             String?              @map("name")
  description                      String?              @map("description")
  numberIssued                     Int?                 @map("number_issued")
  dailyNumberIssued                Int?                 @map("daily_number_issued")
  numberUsablePerBooker            Int?                 @map("number_usable_per_booker")
  dailyUsageLimitPerBooker         Int?                 @map("daily_usage_limit_per_booker")
  isActivated                      Boolean              @default(false) @map("is_activated")
  isPublished                      Boolean              @default(false) @map("is_published")
  type                             VoucherType          @default(DISCOUNT) @map("type")
  discountUnit                     DiscountUnit         @default(PERCENT) @map("discount_unit")
  discountValue                    Int                  @default(0) @map("discount_value")
  maximumDiscountValue             Int?                 @map("maximum_discount_value")
  minimumBookingTotalPriceForUsage Int?                 @default(0) @map("minimum_booking_total_price_for_usage")
  minimumBookingDurationForUsage   Int?                 @default(0) @map("minimum_booking_duration_for_sage")
  startDate                        DateTime?            @map("start_date")
  endDate                          DateTime?            @map("end_date")
  applyISODayOfWeek                Int[]                @default([1, 2, 3, 4, 5, 6, 7]) @map("apply_iso_day_of_week") //Monday is 1, Tuesday is 2, through to 7 for Sunday.
  recipientType                    VoucherRecipientType @default(ALL) @map("recipient_type")
  selectiveBookerIds               String[]             @default([]) @map("selective_booker_id")
  isHided                          Boolean              @default(false) @map("is_hided")
  status                           VoucherStatus        @default(PENDING) @map("status")

  voucherRedeemedBookings VoucherRedeemedBooking[]

  @@map("voucher")
}

model Feedback {
  id         String         @id @default(uuid()) @map("id")
  createdAt  DateTime?      @default(now()) @map("created_at")
  updatedAt  DateTime?      @updatedAt @map("updated_at")
  deletedAt  DateTime?      @map("deleted_at")
  booking    BookingHistory @relation(fields: [bookingId], references: [id])
  bookingId  String         @unique @map("booking_id")
  content    String?        @map("content")
  amountStar Int?           @map("amount_star")

  @@map("feedback")
}

model ReportUser {
  id              String           @id @default(uuid()) @map("id")
  createdAt       DateTime?        @default(now()) @map("created_at")
  updatedAt       DateTime?        @updatedAt @map("updated_at")
  deletedAt       DateTime?        @map("deleted_at")
  reportingUser   User             @relation("ReportingUsers", fields: [reportingUserId], references: [id])
  reportingUserId String           @map("reporting_user_id")
  reportedUser    User             @relation("ReportedUsers", fields: [reportedUserId], references: [id])
  reportedUserId  String           @map("reported_user_id")
  reasonType      ReportReasonType @default(OTHER) @map("resone_type")
  content         String?          @map("content")

  @@map("report_user")
}

model DepositRequest {
  id               String                       @id @default(uuid()) @map("id")
  createdAt        DateTime?                    @default(now()) @map("created_at")
  updatedAt        DateTime?                    @updatedAt @map("updated_at")
  deletedAt        DateTime?                    @map("deleted_at")
  amountMoney      Int?                         @map("amount_money")
  amountBalance    Float?                       @map("amount_balance")
  unitCurrency     UnitCurrency?                @map("unit_currency")
  requester        User                         @relation(fields: [requesterId], references: [id])
  requesterId      String                       @map("requester_id")
  dataString       String?                      @map("data_string")
  dataStringType   DepositRequestDataStringType @map("data_string_type")
  balanceHistory   BalanceHistory?              @relation(fields: [balanceHistoryId], references: [id])
  balanceHistoryId String?                      @unique @map("balance_history_id")
  status           DepositRequestStatus         @default(INIT) @map("status")
  handlerId        String?                      @map("handler_id")
  handler          Admin?                       @relation(fields: [handlerId], references: [id])
  handlerFeedback  String?                      @map("handler_feedback")
  billImageUrl     String?                      @map("bill_image_url")
  platform         PaymentSystemPlatform?       @map("platform")
  transactionCode  String?                      @unique() @map("transaction_code")
  content          String?                      @map("content")
  beneficiary      String?                      @map("beneficiary")

  @@map("deposit_request")
}

model WithdrawalRequest {
  id                  String                   @id @default(uuid()) @map("id")
  createdAt           DateTime?                @default(now()) @map("created_at")
  updatedAt           DateTime?                @updatedAt @map("updated_at")
  deletedAt           DateTime?                @map("deleted_at")
  amountMoney         Int?                     @map("amount_money")
  amountBalance       Float?                   @map("amount_balance")
  unitCurrency        UnitCurrency?            @map("unit_currency")
  requester           User                     @relation(fields: [requesterId], references: [id])
  requesterId         String                   @map("requester_id")
  balanceHistory      BalanceHistory?          @relation(fields: [balanceHistoryId], references: [id])
  balanceHistoryId    String?                  @unique @map("balance_history_id")
  status              WithdrawalRequestStatus? @default(PENDING) @map("status")
  handlerId           String?                  @map("handler_id")
  handlerFeedback     String?                  @map("handler_feedback")
  billImageUrl        String?                  @map("bill_image_url")
  userPaymentSystem   UserPaymentSystem        @relation(fields: [userPaymentSystemId], references: [id])
  userPaymentSystemId String                   @map("user_payment_system_id")

  @@map("withdrawal_request")
}

model Notice {
  id        String      @id @default(uuid()) @map("id")
  createdAt DateTime?   @default(now()) @map("created_at")
  updatedAt DateTime?   @updatedAt @map("updated_at")
  deletedAt DateTime?   @map("deleted_at")
  type      NoticeType? @map("notice_type")
  user      User        @relation(fields: [userId], references: [id])
  userId    String      @map("user_id")
  data      Json?       @map("data")
  isReaded  Boolean?    @default(false) @map("is_readed")

  @@map("notice")
}

model Banner {
  id          String    @id @default(uuid()) @map("id")
  createdAt   DateTime? @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")
  imageUrl    String?   @map("image_url")
  position    Int?      @map("position")
  isActivated Boolean?  @default(false) @map("is_actiaved")

  @@map("banner")
}

model BalanceSetting {
  id                    String                 @id @default(uuid()) @map("id")
  createdAt             DateTime?              @default(now()) @map("created_at")
  updatedAt             DateTime?              @updatedAt @map("updated_at")
  deletedAt             DateTime?              @map("deleted_at")
  balanceSettingType    BalanceSettingType?    @map("balance_setting_type")
  paymentSystemPlatform PaymentSystemPlatform? @map("payment_system_platform")
  unitCurrency          UnitCurrency?          @map("unit_currency")
  feePercentage         Float?                 @default(0) @map("fee")
  surcharge             Float?                 @default(0) @map("surcharge")

  @@map("balance_setting")
}

model Post {
  id           String        @id @default(uuid()) @map("id")
  createdAt    DateTime?     @default(now()) @map("created_at")
  updatedAt    DateTime?     @updatedAt @map("updated_at")
  deletedAt    DateTime?     @map("deleted_at")
  user         User          @relation(fields: [userId], references: [id])
  userId       String        @map("user_id")
  content      String?       @map("content") @db.Text()
  thumbnails   Json[]        @default([]) @map("thumbnails")
  likePosts    LikePost[]
  commentPosts CommentPost[]
  watchedPosts WatchedPost[]

  @@map("post")
}

model LikePost {
  id        String    @id @default(uuid()) @map("id")
  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @map("user_id")
  post      Post      @relation(fields: [postId], references: [id])
  postId    String    @map("post_id")

  @@map("like_post")
}

model CommentPost {
  id              String        @id @default(uuid()) @map("id")
  createdAt       DateTime?     @default(now()) @map("created_at")
  updatedAt       DateTime?     @updatedAt @map("updated_at")
  deletedAt       DateTime?     @map("deleted_at")
  user            User          @relation(fields: [userId], references: [id])
  userId          String        @map("user_id")
  post            Post          @relation(fields: [postId], references: [id])
  postId          String        @map("post_id")
  content         String?       @map("content")
  parentComment   CommentPost?  @relation("parent_comment", fields: [parentCommentId], references: [id])
  parentCommentId String?       @map("parent_comment_id")
  replies         CommentPost[] @relation("parent_comment")

  @@map("comment_post")
}

model WatchedPost {
  id        String    @id @default(uuid()) @map("id")
  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @map("user_id")
  post      Post      @relation(fields: [postId], references: [id])
  postId    String    @map("post_id")

  @@map("watched_post")
}

model Donation {
  id               String           @id @default(uuid()) @map("id")
  createdAt        DateTime?        @default(now()) @map("created_at")
  updatedAt        DateTime?        @updatedAt @map("updated_at")
  deletedAt        DateTime?        @map("deleted_at")
  donor            User             @relation("DonorDonations", fields: [donorId], references: [id])
  donorId          String           @map("donor_id")
  donatedAmount    Float            @map("donated_amount")
  recipient        User             @relation("RecipientDonations", fields: [recipientId], references: [id])
  recipientId      String           @map("recipient_id")
  receivedAmount   Float            @map("received_amount")
  message          String?          @map("message")
  balanceHistories BalanceHistory[]

  @@map("donation")
}

model InstantCard {
  id                  String               @id @default(uuid()) @map("id")
  createdAt           DateTime?            @default(now()) @map("created_at")
  updatedAt           DateTime?            @updatedAt @map("updated_at")
  deletedAt           DateTime?            @map("deleted_at")
  user                User                 @relation(fields: [userId], references: [id])
  userId              String               @map("user_id")
  content             String               @map("content")
  gradientColors      String               @map("gradient_colors")
  instantCardHashTags InstantCardHashTag[]

  @@map("instant_card")
}

model InstantCardHashTag {
  id            String      @id @default(uuid()) @map("id")
  createdAt     DateTime?   @default(now()) @map("created_at")
  updatedAt     DateTime?   @updatedAt @map("updated_at")
  deletedAt     DateTime?   @map("deleted_at")
  instantCard   InstantCard @relation(fields: [instantCardId], references: [id])
  instantCardId String      @map("instant_card_id")
  hashTag       HashTag     @relation(fields: [hashTagId], references: [id])
  hashTagId     String      @map("hash_tag")

  @@map("instant_card_hash_tag")
}

model HashTag {
  id                 String               @id @default(uuid()) @map("id")
  createdAt          DateTime?            @default(now()) @map("created_at")
  updatedAt          DateTime?            @updatedAt @map("updated_at")
  deletedAt          DateTime?            @map("deleted_at")
  content            String?              @map("content") @db.VarChar(10)
  instantCardHashTag InstantCardHashTag[]

  @@map("hash_tag")
}

enum BalanceType {
  SPEND_BOOKING
  SPEND_GIFT
  SPEND_DONATE
  GET_BOOKING
  GET_DONATE
  GET_GIFT
  DEPOSIT
  GET_MISSION
  WITHDRAWAL
  ADMIN
  REFUND_TO_USER
  PROVIDER_REFUND
}

enum LoginType {
  INAPP
  FACEBOOK
  GOOGLE
  KAKAO
  APPLE
  PHONE
}

enum AdminRoleType {
  SUPER_ADMIN
  ADMIN
  COLLABORATOR
  CASHIER
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PRIVATE
}

enum PaymentSystemPlatform {
  MOMO
  VNPAY
  ZALOPAY
  TPB
  BIDV
}

enum AdminPaymentSystemStatus {
  INIT
  APPROVED
  REJECTED
}

enum BookingStatus {
  INIT
  USER_CANCEL
  PROVIDER_CANCEL
  PROVIDER_ACCEPT
  PROVIDER_FINISH_SOON
  USER_FINISH_SOON
}

enum UnitCurrency {
  VND
  USD
}

enum DepositRequestStatus {
  INIT
  USER_NOTICES_PAID
  PENDING
  REJECTED
  APPROVED
}

enum WithdrawalRequestStatus {
    PENDING
    CANCEL
    REJECTED
    COMPLETED
}

enum BalanceSettingType {
  DEPOSIT
  WITHDRAWAL
  PROVIDER_GET_MONEY_BOOKING
  GIFT_TO_MONEY
  PROVIDER_GET_MONEY_DONATE
}

enum NoticeType {
  NEW_MESSAGE
  HAVE_BOOKING
  BOOKING_HAS_BEEN_DECLINED
  BOOKING_HAS_BEEN_SUCCEEDED
  SOMEONE_FOLLOWING_YOU
  ADMIN_HAS_BANNED_PROVIDER
  ADMIN_HAS_UN_BANNED_PROVIDER
  ADMIN_HAS_APPROVED_KYC_REQUEST
  ADMIN_HAS_REJECTED_KYC_REQUEST
  ADMIN_HAS_COMPLETED_WITHDRAWAL_REQUEST
  ADMIN_HAS_REJECTED_WITHDRAWAL_REQUEST
  DEPOSIT_REQUEST_SUCCESS
}

enum VoucherType {
  DISCOUNT
  CASHBACK
}

enum DiscountUnit {
  CASH
  PERCENT
}

enum VoucherRecipientType {
  ALL
  FIRST_TIME_BOOKING
  PREVIOUS_BOOKING
  SELECTIVE_BOOKER
  TOP_5_BOOKER
  TOP_10_BOOKER
}

enum RegisterProviderRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ProviderStatus {
  ACTIVATED
  UN_ACTIVATED
  STOPPED_ACCEPTING_BOOKING
  BUSY
}

enum UserKYCStatus {
  PENDING
  APPROVED
  REJECTED
}

enum VoucherStatus {
  PENDING
  APPROVED
  REJECTED
}

enum DepositRequestDataStringType {
  QR
  REDIRECT_URL
}

enum ReportReasonType {
  ABUSIVE_LANGUAGE
  CHEATING
  SPAM_OR_HARASSMENT
  INAPPROPRIATE_CONTENT
  VIOLENT_OR_DISCRIMINATORY_BEHAVIOR
  FAKE_ACCOUNT_OR_SCAM
  ILLEGAL_TRANSACTIONS
  OTHER
}

enum BookingComplaintStatus {
  /// Khiếu nại đang chờ xử lý
  PENDING_PROCESSING // Mới init   => (1) : Từ chối chối"..lý do" [REJECTED]   (2): Gửi thông báo tới provider "...lý do (option)" [AWAITING_PROVIDER_RESPONSE]

  /// Khiếu nại bị từ chối
  REJECTED // END

  /// Khiếu nại đang chờ phản hồi từ nhà cung cấp dịch vụ
  AWAITING_PROVIDER_RESPONSE // Sau khi phản hồi => (1) : Từ chối phản hồi "...Lý do"[REJECTED_RESPONSE_FROM_PROVIDER]   (2)
  // 
  PROVIDER_RESPONDED

  /// Khiếu nại đã được giải quyết và đang chờ xác nhận từ người dùng
  RESOLVED
}

enum BookingComplaintType {
  /// Cung cấp không đúng dịch vụ
  WRONG_SERVICE_PROVIDED

  /// Lừa đảo trong giao dịch
  FRAUD

  /// Dịch vụ bị trì hoãn
  DELAYED_SERVICE

  /// Các loại khiếu nại khác
  OTHER
  // Các loại khác có thể được thêm vào tại đây và chú thích ý nghĩa của chúng
}

enum BookingComplaintResponseType {
  PROVIDER_SEND_TO_ADMIN
  ADMIN_SEND_TO_PROVIDER
  ADMIN_SEND_TO_BOOKER
}
