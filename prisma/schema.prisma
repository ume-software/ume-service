generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_WITH_SCHEMA")
}

model User {
  id               String            @id @default(uuid()) @map("id")
  createdAt        DateTime?         @default(now()) @map("created_at")
  updatedAt        DateTime?         @updatedAt @map("updated_at")
  deletedAt        DateTime?         @map("deleted_at")
  isOnline         Boolean?          @default(false) @map("is_online")
  latestOnline     Boolean?          @map("latest_online")
  loginType        LoginType?        @map("login_type")
  provider         Provider?
  coinHistories    CoinHistory[]
  bookingHistories BookingHistory[]
  buyCoinRequests  BuyCoinRequest[]
  sellCoinRequests SellCoinRequest[]
  notices          Notice?

  @@map("user")
}

model Provider {
  id             String          @id @default(uuid()) @map("id")
  createdAt      DateTime?       @default(now()) @map("created_at")
  updatedAt      DateTime?       @updatedAt @map("updated_at")
  deletedAt      DateTime?       @map("deleted_at")
  user           User            @relation(fields: [userId], references: [id])
  userId         String          @unique @map("user_id")
  slug           String?         @map("slug")
  name           String?         @map("name")
  avatarUrl      String?         @map("avatar_url")
  voiceUrl       String?         @map("voice_url")
  description    String?         @map("description") @db.Text()
  providerSkills ProviderSkill[]

  @@map("provider")
}

model Skill {
  id             String          @id @default(uuid()) @map("id")
  createdAt      DateTime?       @default(now()) @map("created_at")
  updatedAt      DateTime?       @updatedAt @map("updated_at")
  deletedAt      DateTime?       @map("deleted_at")
  name           String          @map("name")
  imageUrl       String?         @map("image_url")
  providerSkills ProviderSkill[]

  @@map("skill")
}

model ProviderSkill {
  id               String           @id @default(uuid()) @map("id")
  createdAt        DateTime?        @default(now()) @map("created_at")
  updatedAt        DateTime?        @updatedAt @map("updated_at")
  deletedAt        DateTime?        @map("deleted_at")
  provider         Provider         @relation(fields: [providerId], references: [id])
  providerId       String           @map("provider_id")
  skill            Skill            @relation(fields: [skillId], references: [id])
  skillId          String           @map("skill_id")
  defaultCost      Float            @map("default_cost")
  position         Int              @map("position")
  bookingCosts     BookingCost[]
  bookingHistories BookingHistory[]

  @@map("provider_skill")
}

model BookingCost {
  id              String        @id @default(uuid()) @map("id")
  createdAt       DateTime?     @default(now()) @map("created_at")
  updatedAt       DateTime?     @updatedAt @map("updated_at")
  deletedAt       DateTime?     @map("deleted_at")
  providerSkill   ProviderSkill @relation(fields: [providerSkillId], references: [id])
  providerSkillId String        @map("provider_skill_id")
  startTimeOfDay  String?       @map("start_time_of_day")
  endTimeOfDay    String?       @map("end_time_of_day")
  amount          Float?        @map("amount")

  @@map("booking_cost")
}

model CoinHistory {
  id              String           @id @default(uuid()) @map("id")
  createdAt       DateTime?        @default(now()) @map("created_at")
  updatedAt       DateTime?        @updatedAt @map("updated_at")
  deletedAt       DateTime?        @map("deleted_at")
  user            User             @relation(fields: [userId], references: [id])
  userId          String           @map("user_id")
  coinType        CoinType?        @map("coin_type")
  amount          Float?           @map("amount")
  createdId       String?          @map("created_id")
  buyCoinRequest  BuyCoinRequest?
  sellCoinRequest SellCoinRequest?

  @@map("coin_history")
}

model BookingHistory {
  id              String         @id @default(uuid()) @map("id")
  createdAt       DateTime?      @default(now()) @map("created_at")
  updatedAt       DateTime?      @updatedAt @map("updated_at")
  deletedAt       DateTime?      @map("deleted_at")
  status          BookingStatus
  acceptedAt      DateTime?      @map("accepted_at")
  booker          User?          @relation(fields: [bookerId], references: [id])
  bookerId        String?        @map("booker_id")
  providerSkill   ProviderSkill? @relation(fields: [providerSkillId], references: [id])
  providerSkillId String?        @map("provider_skill_id")
  totalCost       Float          @map("total_cost")
  bookingPeriod   Int            @map("booking_period")

  feedbacks Feedback[]

  @@map("booking_history")
}

model Feedback {
  id          String         @id @default(uuid()) @map("id")
  createdAt   DateTime?      @default(now()) @map("created_at")
  updatedAt   DateTime?      @updatedAt @map("updated_at")
  deletedAt   DateTime?      @map("deleted_at")
  booking     BookingHistory @relation(fields: [bookingId], references: [id])
  bookingId   String         @map("booking_id")
  content     String?        @map("content")
  amountStart Int?           @map("amount_start")

  @@map("feedback")
}

model BuyCoinRequest {
  id              String                 @id @default(uuid()) @map("id")
  createdAt       DateTime?              @default(now()) @map("created_at")
  updatedAt       DateTime?              @updatedAt @map("updated_at")
  deletedAt       DateTime?              @map("deleted_at")
  amountMoney     Int?                   @map("amount_money")
  amountCoin      Float?                 @map("amount_coin")
  unitCurrency    UnitCurrency?          @map("unit_currency")
  requester       User                   @relation(fields: [requesterId], references: [id])
  requesterId     String                 @map("requester_id")
  qrString        String?                @map("qr_string")
  coinHistory     CoinHistory?           @relation(fields: [coinHistoryId], references: [id])
  coinHistoryId   String?                @unique @map("coin_history_id")
  status          BuyCoinRequestStatus   @default(INIT) @map("status")
  handlerId       String?                @map("handler_id")
  handlerFeeback  String?                @map("handler_feeback")
  billImageUrl    String?                @map("bill_image_url")
  platform        PaymentSystemPlatform? @map("platform")
  transactionCode String?                @unique() @map("transcaction_code")
  content         String?                @map("content")
  beneficiary     String?                @map("beneficiary")

  @@map("buy_coin_request")
}

model SellCoinRequest {
  id             String                 @id @default(uuid()) @map("id")
  createdAt      DateTime?              @default(now()) @map("created_at")
  updatedAt      DateTime?              @updatedAt @map("updated_at")
  deletedAt      DateTime?              @map("deleted_at")
  content        String?                @map("content")
  amountMoney    Int?                   @map("amount_money")
  amountCoin     Float?                 @map("amount_coin")
  unitCurrency   UnitCurrency?          @map("unit_currency")
  requester      User                   @relation(fields: [requesterId], references: [id])
  requesterId    String                 @map("requester_id")
  qrContent      String?                @map("qr_content")
  coinHistory    CoinHistory?           @relation(fields: [coinHistoryId], references: [id])
  coinHistoryId  String?                @unique @map("coin_history_id")
  status         SellCoinRequestStatus? @default(PENDING) @map("status")
  handlerId      String?                @map("handler_id")
  handlerFeeback String?                @map("handler_feeback")
  billImageUrl   String?                @map("bill_image_url")

  @@map("withdrawal_request")
}

model Notice {
  id        String      @id @default(uuid()) @map("id")
  createdAt DateTime?   @default(now()) @map("created_at")
  updatedAt DateTime?   @updatedAt @map("updated_at")
  deletedAt DateTime?   @map("deleted_at")
  type      NoticeType? @map("notice_type")
  user      User        @relation(fields: [userId], references: [id])
  userId    String      @unique @map("user_id")
  data      Json?       @map("data")
  isReaded  Boolean?    @default(false) @map("is_readed")
}

model Banner {
  id        String        @id @default(uuid()) @map("id")
  createdAt DateTime?     @default(now()) @map("created_at")
  updatedAt DateTime?     @updatedAt @map("updated_at")
  deletedAt DateTime?     @map("deleted_at")
  imageUrl  String?       @map("image_url")
  position  Int?          @map("position")
  status    BannerStatus? @map("status")

  @@map("banner")
}

model CoinSetting {
  id                    String                 @id @default(uuid()) @map("id")
  createdAt             DateTime?              @default(now()) @map("created_at")
  updatedAt             DateTime?              @updatedAt @map("updated_at")
  deletedAt             DateTime?              @map("deleted_at")
  coinSettingType       CoinSettingType?       @map("coin_setting_type")
  paymentSystemPlatform PaymentSystemPlatform? @map("payment_system_platform")
  unitCurrency          UnitCurrency?          @map("unit_currency")
  conversionRateCoin    Float?                 @map("conversion_rate_coin")
  feePercentage         Float?                 @default(0) @map("fee")
  surcharge             Float?                 @default(0) @map("surcharge")

  @@map("coin_setting")
}

enum CoinType {
  SPEND_BOOKING
  SPEND_GIFT
  SPEND_DONATE
  GET_BOOKING
  GET_DONATE
  GET_GIFT
  BUY_COIN
  GET_MISSION
  WITHDRAW
  ADMIN
}

enum LoginType {
  INAPP
  FACEBOOK
  GOOGLE
  KAKAO
  APPLE
  PHONE
}

enum BookingStatus {
  INIT
  USER_CANCEL
  PROVIDER_CANCEL
  PROVIDER_ACCEPT
  PROVIDER_FINISH_SOON
  USER_FINISH_SOON
}

enum UnitCurrency {
  VND
  USD
}

enum BuyCoinRequestStatus {
  INIT
  USER_NOTICES_PAID
  PENDING
  REJECTED
  APPROVED
}

enum SellCoinRequestStatus {
  PENDING
  CANCEL
  REJECTED
  COMPLETED
}

enum BannerStatus {
  INIT
  ACTIVATED
  UNACTIVATED
}

enum PaymentSystemPlatform {
  MOMO
  VNPAY
  ZALOPAY
  TPB
  BIDV
}

enum CoinSettingType {
  BUY_COIN
  SELL_COIN
  PROVIDER_GET_COIN_BOOKING
  GIFT_TO_COIN
}

enum NoticeType {
  NEW_MESSAGE
  HAVE_BOOKING
  BOOKING_HAS_BEEN_DECLINED
  BOOKING_HAS_BEEN_SUCCESSED
  SOMEONE_FOLLOWING_YOU
}
